/**
 * NOTE: This class is auto generated by the swagger code generator program (unset).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package de.hsbo.kommonitor.datamanagement.api.legacy;

import java.math.BigDecimal;
import java.util.List;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import de.hsbo.kommonitor.datamanagement.model.legacy.georesources.GeoresourceOverviewType;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;

@Api(value = "Georesources", description = "the public Georesources API")
public interface GeoresourcesPublicApi {

	@ApiOperation(value = "retrieve all feature entries for all applicable periods of validity for the selected public geo-resource dataset (hence might contain each feature multiple times if they exist for different periods of validity)", nickname = "getAllPublicGeoresourceFeaturesById", notes = "retrieve all feature entries for all applicable periods of validity for the selected public geo-resource dataset (hence might contain each feature multiple times if they exist for different periods of validity)", response = String.class, authorizations = {
			@Authorization(value = "basicAuth") }, tags = {})
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = String.class),
			@ApiResponse(code = 400, message = "Invalid status value"),
			@ApiResponse(code = 401, message = "API key is missing or invalid") })
	@RequestMapping(value = "/georesources/{georesourceId}/allFeatures", produces = {
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<byte[]> getAllPublicGeoresourceFeaturesById(
			@ApiParam(value = "the identifier of the public geo-resource dataset", required = true) @PathVariable("georesourceId") String georesourceId,
			@ApiParam(value = "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification.", allowableValues = "original, weak, medium, strong", defaultValue = "original") @RequestParam(value = "simplifyGeometries", required = false, defaultValue = "original") String simplifyGeometries);

	@ApiOperation(value = "retrieve information about available features of different public geo-resource datasets", nickname = "getPublicGeoresources", notes = "retrieve information about available features of different public geo-resource datasets", response = GeoresourceOverviewType.class, responseContainer = "array", authorizations = {
			@Authorization(value = "basicAuth") }, tags = {})
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "OK", response = GeoresourceOverviewType.class, responseContainer = "array"),
			@ApiResponse(code = 400, message = "Invalid status value"),
			@ApiResponse(code = 401, message = "API key is missing or invalid") })
	@RequestMapping(value = "/georesources", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<GeoresourceOverviewType>> getPublicGeoresources();

	@ApiOperation(value = "retrieve information about available features of the selected public geo-resource dataset", nickname = "getPublicGeoresourceById", notes = "retrieve information about available features of the selected public geo-resource dataset", response = GeoresourceOverviewType.class, authorizations = {
			@Authorization(value = "basicAuth") }, tags = {})
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = GeoresourceOverviewType.class),
			@ApiResponse(code = 400, message = "Invalid status value"),
			@ApiResponse(code = 401, message = "API key is missing or invalid") })
	@RequestMapping(value = "/georesources/{georesourceId}", produces = {
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<GeoresourceOverviewType> getPublicGeoresourceById(
			@ApiParam(value = "identifier of the public geo-resource dataset", required = true) @PathVariable("georesourceId") String georesourceId);

	@ApiOperation(value = "retrieve the features according to the selected public geo-resource dataset and selected year and month as GeoJSON", nickname = "getPublicGeoresourceByIdAndYearAndMonth", notes = "retrieve the features according to the selected public geo-resource dataset and selected year and month as GeoJSON", response = byte[].class, authorizations = {
			@Authorization(value = "basicAuth") }, tags = {})
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = byte[].class),
			@ApiResponse(code = 400, message = "Invalid status value"),
			@ApiResponse(code = 401, message = "API key is missing or invalid") })
	@RequestMapping(value = "/georesources/{georesourceId}/{year}/{month}/{day}", produces = {
			"application/octed-stream" }, method = RequestMethod.GET)
	ResponseEntity<byte[]> getPublicGeoresourceByIdAndYearAndMonth(
			@ApiParam(value = "identifier of the public geo-resource dataset", required = true) @PathVariable("georesourceId") String georesourceId,
			@ApiParam(value = "year for which datasets shall be queried", required = true) @PathVariable("year") BigDecimal year,
			@ApiParam(value = "month for which datasets shall be queried", required = true) @PathVariable("month") BigDecimal month,
			@ApiParam(value = "day for which datasets shall be queried", required = true) @PathVariable("day") BigDecimal day,
			@ApiParam(value = "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification.", allowableValues = "original, weak, medium, strong", defaultValue = "original") @RequestParam(value = "simplifyGeometries", required = false, defaultValue = "original") String simplifyGeometries);

	@ApiOperation(value = "retrieve only the properties without geometry of all feature entries for all applicable periods of validity for the selected public geo-resource dataset (hence might contain each feature multiple times if they exist for different periods of validity)", nickname = "getAllPublicGeoresourceFeaturesByIdWithoutGeometry", notes = "retrieve only the properties without geometry of all feature entries for all applicable periods of validity for the selected public geo-resource dataset (hence might contain each feature multiple times if they exist for different periods of validity)", response = String.class, authorizations = {
			@Authorization(value = "kommonitor-data-access_oauth", scopes = {

			}) }, tags = { "georecources-public-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = String.class),
			@ApiResponse(code = 400, message = "Invalid status value"),
			@ApiResponse(code = 401, message = "API key is missing or invalid"),
			@ApiResponse(code = 403, message = "Forbidden"), @ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/georesources/{georesourceId}/allFeatures/without-geometry", produces = {
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<byte[]> getAllPublicGeoresourceFeaturesByIdWithoutGeometry(
			@ApiParam(value = "georesourceId", required = true) @PathVariable("georesourceId") String georesourceId);

	@ApiOperation(value = "retrieve only the properties without geometry of the features according to the selected public geo-resource dataset and selected year and month as GeoJSON", nickname = "getPublicGeoresourceByIdAndYearAndMonthWithoutGeometry", notes = "retrieve only the properties without geometry of the features according to the selected public geo-resource dataset and selected year and month as GeoJSON", response = byte[].class, authorizations = {
			@Authorization(value = "kommonitor-data-access_oauth", scopes = {

			}) }, tags = { "georecources-public-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = byte[].class),
			@ApiResponse(code = 400, message = "Invalid status value"),
			@ApiResponse(code = 401, message = "API key is missing or invalid"),
			@ApiResponse(code = 403, message = "Forbidden"), @ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/georesources/{georesourceId}/{year}/{month}/{day}/without-geometry", produces = {
			"application/octed-stream" }, method = RequestMethod.GET)
	ResponseEntity<byte[]> getPublicGeoresourceByIdAndYearAndMonthWithoutGeometry(
			@ApiParam(value = "day", required = true) @PathVariable("day") BigDecimal day,
			@ApiParam(value = "georesourceId", required = true) @PathVariable("georesourceId") String georesourceId,
			@ApiParam(value = "month", required = true) @PathVariable("month") BigDecimal month,
			@ApiParam(value = "year", required = true) @PathVariable("year") BigDecimal year);

	@ApiOperation(value = "retrieve the JSON schema for the selected public geo-resource dataset", nickname = "getPublicGeoresourceSchemaByLevel", notes = "retrieve the JSON schema for the selected public geo-resource dataset. The JSON schema indicates the property structure of the dataset.", response = String.class, authorizations = {
			@Authorization(value = "basicAuth") }, tags = {})
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = String.class),
			@ApiResponse(code = 400, message = "Invalid status value"),
			@ApiResponse(code = 401, message = "API key is missing or invalid") })
	@RequestMapping(value = "/georesources/{georesourceId}/schema", produces = {
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<String> getPublicGeoresourceSchemaByLevel(
			@ApiParam(value = "the identifier of the public geo-resource dataset", required = true) @PathVariable("georesourceId") String georesourceId);

	@ApiOperation(value = "retrieve single feature database records for all applicable periods of validity for the selected geo-resource dataset (hence might contain the target feature multiple times if it exists for different periods of validity)", nickname = "getPublicSingleGeoresourceFeatureById", notes = "retrieve single feature database records for all applicable periods of validity for the selected geo-resource dataset (hence might contain the target feature multiple times if it exists for different periods of validity)", response = String.class, authorizations = {
			@Authorization(value = "kommonitor-data-access_oauth", scopes = {

			}) }, tags = { "georecources-public-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = String.class),
			@ApiResponse(code = 400, message = "Invalid status value"),
			@ApiResponse(code = 401, message = "API key is missing or invalid"),
			@ApiResponse(code = 403, message = "Forbidden"), @ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/georesources/{georesourceId}/singleFeature/{featureId}", produces = {
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<byte[]> getPublicSingleGeoresourceFeatureById(
			@ApiParam(value = "the identifier of the geo-resource dataset", required = true) @PathVariable("georesourceId") String georesourceId,
			@ApiParam(value = "the identifier of the geo-resource dataset feature", required = true) @PathVariable("featureId") String featureId,
			@ApiParam(value = "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification.", allowableValues = "original, weak, medium, strong", defaultValue = "original") @RequestParam(value = "simplifyGeometries", required = false, defaultValue = "original") String simplifyGeometries);

	@ApiOperation(value = "retrieve single feature database record specified by its unique database primary key id", nickname = "getPublicSingleGeoresourceFeatureRecordById", notes = "retrieve single feature database record specified by its unique database primary key id", response = String.class, authorizations = {
			@Authorization(value = "kommonitor-data-access_oauth", scopes = {

			}) }, tags = { "georecources-public-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = String.class),
			@ApiResponse(code = 400, message = "Invalid status value"),
			@ApiResponse(code = 401, message = "API key is missing or invalid"),
			@ApiResponse(code = 403, message = "Forbidden"), @ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/georesources/{georesourceId}/singleFeature/{featureId}/singleFeatureRecord/{featureRecordId}", produces = {
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<byte[]> getPublicSingleGeoresourceFeatureRecordById(
			@ApiParam(value = "the identifier of the geo-resource dataset", required = true) @PathVariable("georesourceId") String georesourceId,
			@ApiParam(value = "the identifier of the geo-resource dataset feature", required = true) @PathVariable("featureId") String featureId,
			@ApiParam(value = "the unique database record identifier of the geo-resource dataset feature - multiple records may exist for the same real world object if they apply to different periods of validity", required = true) @PathVariable("featureRecordId") String featureRecordId,
			@ApiParam(value = "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification.", allowableValues = "original, weak, medium, strong", defaultValue = "original") @RequestParam(value = "simplifyGeometries", required = false, defaultValue = "original") String simplifyGeometries);

}
