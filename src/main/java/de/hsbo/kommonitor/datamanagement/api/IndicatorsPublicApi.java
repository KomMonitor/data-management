/**
 * NOTE: This class is auto generated by the swagger code generator program (unset).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package de.hsbo.kommonitor.datamanagement.api;

import de.hsbo.kommonitor.datamanagement.model.indicators.*;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.util.List;

@javax.annotation.Generated(value = "de.prospectiveharvest.codegen.PHServerGenerator", date = "2019-04-05T10:56:22.201+02:00")

@Api(value = "Indicators", description = "the Indicators API")
public interface IndicatorsPublicApi {

    @ApiOperation(value = "retrieve information about the selected public indicator",
            nickname = "getPublicIndicatorById",
            notes = "retrieve information about the selected public indicator",
            response = IndicatorOverviewType.class,
            authorizations = {
                    @Authorization(value = "basicAuth")
            }, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = IndicatorOverviewType.class),
            @ApiResponse(code = 400, message = "Invalid status value"),
            @ApiResponse(code = 401, message = "API key is missing or invalid")})
    @RequestMapping(value = "/indicators/{indicatorId}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<IndicatorOverviewType> getPublicIndicatorById(@ApiParam(value = "unique identifier of the selected public indicator dataset", required = true) @PathVariable("indicatorId") String indicatorId);

    @ApiOperation(value = "retrieve the public indicator for the selected spatial unit as GeoJSON",
            nickname = "getPublicIndicatorBySpatialUnitIdAndId",
            notes = "retrieve the public indicator for the selected spatial unit as GeoJSON",
            response = byte[].class,
            authorizations = {
                    @Authorization(value = "basicAuth")
            }, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = byte[].class),
            @ApiResponse(code = 400, message = "Invalid status value"),
            @ApiResponse(code = 401, message = "API key is missing or invalid")})
    @RequestMapping(value = "/indicators/{indicatorId}/{spatialUnitId}",
            produces = {"application/octed-stream"},
            method = RequestMethod.GET)
    ResponseEntity<byte[]> getPublicIndicatorBySpatialUnitIdAndId(@ApiParam(value = "unique identifier of the selected public indicator dataset", required = true) @PathVariable("indicatorId") String indicatorId,
                                                                  @ApiParam(value = "the unique identifier of the public spatial level", required = true) @PathVariable("spatialUnitId") String spatialUnitId,
                                                                  @ApiParam(value = "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification.", allowableValues = "original, weak, medium, strong", defaultValue = "original") @RequestParam(value = "simplifyGeometries", required = false, defaultValue = "original") String simplifyGeometries);

    @ApiOperation(value = "retrieve the public indicator for the selected public spatial unit, year and month as GeoJSON",
            nickname = "getPublicIndicatorBySpatialUnitIdAndIdAndYearAndMonth", notes = "retrieve the public indicator for the selected spatial unit, year and month as GeoJSON",
            response = byte[].class,
            authorizations = {
                    @Authorization(value = "basicAuth")
            }, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = byte[].class),
            @ApiResponse(code = 400, message = "Invalid status value"),
            @ApiResponse(code = 401, message = "API key is missing or invalid")})
    @RequestMapping(value = "/indicators/{indicatorId}/{spatialUnitId}/{year}/{month}/{day}",
            produces = {"application/octed-stream"},
            method = RequestMethod.GET)
    ResponseEntity<byte[]> getPublicIndicatorBySpatialUnitIdAndIdAndYearAndMonth(@ApiParam(value = "unique identifier of the selected public indicator dataset", required = true) @PathVariable("indicatorId") String indicatorId,
                                                                                 @ApiParam(value = "the unique identifier of the public spatial level", required = true) @PathVariable("spatialUnitId") String spatialUnitId,
                                                                                 @ApiParam(value = "year for which the indicator shall be queried", required = true) @PathVariable("year") BigDecimal year,
                                                                                 @ApiParam(value = "month for which the indicator shall be queried", required = true) @PathVariable("month") BigDecimal month,
                                                                                 @ApiParam(value = "day for which datasets shall be queried", required = true) @PathVariable("day") BigDecimal day,
                                                                                 @ApiParam(value = "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification.", allowableValues = "original, weak, medium, strong", defaultValue = "original") @RequestParam(value = "simplifyGeometries", required = false, defaultValue = "original") String simplifyGeometries);

    @ApiOperation(value = "retrieve the public indicator values and other properties for the selected public spatial unit, year and month. It does not include the spatial geometries!",
            nickname = "getPublicIndicatorBySpatialUnitIdAndIdAndYearAndMonthWithoutGeometry",
            notes = "retrieve the public indicator values and other properties for the selected public spatial unit, year and month. It does not include the spatial geometries!",
            response = IndicatorPropertiesWithoutGeomType.class,
            responseContainer = "array",
            authorizations = {
                    @Authorization(value = "basicAuth")
            }, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = IndicatorPropertiesWithoutGeomType.class, responseContainer = "array"),
            @ApiResponse(code = 400, message = "Invalid status value"),
            @ApiResponse(code = 401, message = "API key is missing or invalid")})
    @RequestMapping(value = "/indicators/{indicatorId}/{spatialUnitId}/{year}/{month}/{day}/without-geometry",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<IndicatorPropertiesWithoutGeomType>> getPublicIndicatorBySpatialUnitIdAndIdAndYearAndMonthWithoutGeometry(@ApiParam(value = "unique identifier of the selected indicator dataset", required = true) @PathVariable("indicatorId") String indicatorId,
                                                                                                                                  @ApiParam(value = "the unique identifier of the spatial level", required = true) @PathVariable("spatialUnitId") String spatialUnitId,
                                                                                                                                  @ApiParam(value = "year for which the indicator shall be queried", required = true) @PathVariable("year") BigDecimal year,
                                                                                                                                  @ApiParam(value = "month for which the indicator shall be queried", required = true) @PathVariable("month") BigDecimal month,
                                                                                                                                  @ApiParam(value = "day for which datasets shall be queried", required = true) @PathVariable("day") BigDecimal day);

    @ApiOperation(value = "retrieve the public indicator values and other properties for the selected public spatial unit. It does not include the spatial geometries!",
            nickname = "getPublicIndicatorBySpatialUnitIdAndIdWithoutGeometry",
            notes = "retrieve the public indicator values and other properties for the selected public spatial unit. It does not include the spatial geometries!",
            response = IndicatorPropertiesWithoutGeomType.class,
            responseContainer = "array",
            authorizations = {
                    @Authorization(value = "basicAuth")
            }, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = IndicatorPropertiesWithoutGeomType.class, responseContainer = "array"),
            @ApiResponse(code = 400, message = "Invalid status value"),
            @ApiResponse(code = 401, message = "API key is missing or invalid")})
    @RequestMapping(value = "/indicators/{indicatorId}/{spatialUnitId}/without-geometry",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<IndicatorPropertiesWithoutGeomType>> getPublicIndicatorBySpatialUnitIdAndIdWithoutGeometry(@ApiParam(value = "unique identifier of the selected public indicator dataset", required = true) @PathVariable("indicatorId") String indicatorId,
                                                                                                                   @ApiParam(value = "the unique identifier of the public spatial level", required = true) @PathVariable("spatialUnitId") String spatialUnitId);

    @ApiOperation(value = "retrieve information about available public indicators",
            nickname = "getIndicators",
            notes = "retrieve information about available public indicators",
            response = IndicatorOverviewType.class,
            responseContainer = "array",
            authorizations = {
                    @Authorization(value = "basicAuth")}, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = IndicatorOverviewType.class, responseContainer = "array"),
            @ApiResponse(code = 400, message = "Invalid status value"),
            @ApiResponse(code = 401, message = "API key is missing or invalid")})
    @RequestMapping(value = "/indicators", produces = {"application/json"}, method = RequestMethod.GET)
    ResponseEntity<List<IndicatorOverviewType>> getPublicIndicators();
    
	@ApiOperation(value = "retrieve single feature database records for all applicable periods of validity for the selected indicator dataset (hence might contain the target feature multiple times if it exists for different periods of validity)", nickname = "getPublicSingleIndicatorFeatureById", notes = "retrieve single feature database records for all applicable periods of validity for the selected indicator dataset (hence might contain the target feature multiple times if it exists for different periods of validity)", response = String.class, authorizations = {
			@Authorization(value = "kommonitor-data-access_oauth", scopes = {

			}) }, tags = { "indicators-public-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = IndicatorPropertiesWithoutGeomType.class),
			@ApiResponse(code = 400, message = "Invalid status value"),
			@ApiResponse(code = 401, message = "API key is missing or invalid"),
			@ApiResponse(code = 403, message = "Forbidden"), @ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/indicators/{indicatorId}/{spatialUnitId}/singleFeature/{featureId}", produces = {
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<IndicatorPropertiesWithoutGeomType>> getPublicSingleIndicatorFeatureById(
			@ApiParam(value = "unique identifier of the selected indicator dataset", required = true) @PathVariable("indicatorId") String indicatorId,
			@ApiParam(value = "the unique identifier of the spatial level", required = true) @PathVariable("spatialUnitId") String spatialUnitId,
			@ApiParam(value = "the identifier of the indicator dataset spatial feature", required = true) @PathVariable("featureId") String featureId);

	@ApiOperation(value = "retrieve single feature database record specified by its unique database primary key id", nickname = "getPublicSingleIndicatorFeatureRecordById", notes = "retrieve single feature database record specified by its unique database primary key id", response = IndicatorPropertiesWithoutGeomType.class,
            responseContainer = "array", authorizations = {
			@Authorization(value = "kommonitor-data-access_oauth", scopes = {

			}) }, tags = { "indicators-public-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = IndicatorPropertiesWithoutGeomType.class),
			@ApiResponse(code = 400, message = "Invalid status value"),
			@ApiResponse(code = 401, message = "API key is missing or invalid"),
			@ApiResponse(code = 403, message = "Forbidden"), @ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/indicators/{indicatorId}/{spatialUnitId}/singleFeature/{featureId}/singleFeatureRecord/{featureRecordId}", produces = {
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<IndicatorPropertiesWithoutGeomType>> getPublicSingleIndicatorFeatureRecordById(
			@ApiParam(value = "unique identifier of the selected indicator dataset", required = true) @PathVariable("indicatorId") String indicatorId,
			@ApiParam(value = "the unique identifier of the spatial level", required = true) @PathVariable("spatialUnitId") String spatialUnitId,
			@ApiParam(value = "the identifier of the indicator dataset spatial feature", required = true) @PathVariable("featureId") String featureId,
			@ApiParam(value = "the unique database record identifier of the indicator dataset feature - multiple records may exist for the same real world object if they apply to different periods of validity", required = true) @PathVariable("featureRecordId") String featureRecordId);

}
