/**
 * NOTE: This class is auto generated by the swagger code generator program (unset).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package de.hsbo.kommonitor.datamanagement.api;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import de.hsbo.kommonitor.datamanagement.model.scripts.ProcessScriptOverviewType;
import de.hsbo.kommonitor.datamanagement.model.scripts.ProcessScriptPOSTInputType;
import de.hsbo.kommonitor.datamanagement.model.scripts.ProcessScriptPUTInputType;

import java.util.List;
@javax.annotation.Generated(value = "de.prospectiveharvest.codegen.PHServerGenerator", date = "2018-05-17T10:54:51.077+02:00")

@Api(value = "ProcessScripts", description = "the ProcessScripts API")
public interface ProcessScriptsApi {

    @ApiOperation(value = "Register a new process script", nickname = "addProcessScriptAsBody", notes = "Register a process script associated to a certain indicator", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "API key is missing or invalid"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/process-scripts",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity addProcessScriptAsBody(@ApiParam(value = "details necessary to register the process script" ,required=true )   @RequestBody ProcessScriptPOSTInputType processScriptData);


    @ApiOperation(value = "Delete the process script", nickname = "deleteProcessScript", notes = "Delete the process script associated to the specified indicator", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "API key is missing or invalid") })
    @RequestMapping(value = "/process-scripts/{indicatorId}",
        method = RequestMethod.DELETE)
    ResponseEntity deleteProcessScript(@ApiParam(value = "unique identifier of the selected indicator dataset",required=true) @PathVariable("indicatorId") String indicatorId);


    @ApiOperation(value = "retrieve an empty script template, that defines how to implement process scripts for KomMonitor.", nickname = "getProcessScriptTemplate", notes = "retrieve an empty script template, that defines how to implement process scripts for KomMonitor. The script works as a template for a NodeJS module. Hence, it predefines required methods that are called by the executing processing engine (a NodeJS runtimne environment). As a script developer, those predefined methods have to be implemented. The template contains detailed documentation on how to implement those methods.", response = String.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 400, message = "Invalid status value"),
        @ApiResponse(code = 401, message = "API key is missing or invalid") })
    @RequestMapping(value = "/process-scripts/template",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> getProcessScriptTemplate();


    @ApiOperation(value = "retrieve information about available process scripts", nickname = "getProcessScripts", notes = "retrieve information about available process scripts", response = ProcessScriptOverviewType.class, responseContainer = "array", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProcessScriptOverviewType.class, responseContainer = "array"),
        @ApiResponse(code = 400, message = "Invalid status value"),
        @ApiResponse(code = 401, message = "API key is missing or invalid") })
    @RequestMapping(value = "/process-scripts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ProcessScriptOverviewType>> getProcessScripts();


    @ApiOperation(value = "retrieve information about available process scripts for a certain indicator", nickname = "getProcessScriptsForIndicator", notes = "retrieve information about available process scripts for a certain indicator", response = ProcessScriptOverviewType.class, responseContainer = "array", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProcessScriptOverviewType.class, responseContainer = "array"),
        @ApiResponse(code = 400, message = "Invalid status value"),
        @ApiResponse(code = 401, message = "API key is missing or invalid") })
    @RequestMapping(value = "/process-scripts/{indicatorId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ProcessScriptOverviewType>> getProcessScriptsForIndicator(@ApiParam(value = "unique identifier of the selected indicator dataset",required=true) @PathVariable("indicatorId") String indicatorId);


    @ApiOperation(value = "Modify/Update an existing process script", nickname = "updateProcessScriptAsBody", notes = "Modify/Update an existing process script associated to a certain indicator", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "API key is missing or invalid"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/process-scripts/{indicatorId}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity updateProcessScriptAsBody(@ApiParam(value = "unique identifier of the selected indicator dataset",required=true) @PathVariable("indicatorId") String indicatorId,@ApiParam(value = "details necessary to modify the process script" ,required=true )   @RequestBody ProcessScriptPUTInputType processScriptData);

}
