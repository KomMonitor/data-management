package de.hsbo.kommonitor.datamanagement.api.impl.accesscontrol;

import java.util.List;

import jakarta.transaction.Transactional;

import de.hsbo.kommonitor.datamanagement.model.PermissionLevelType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Repository;

import de.hsbo.kommonitor.datamanagement.model.RoleOverviewType;

@Transactional
@Repository
@Component
public class PermissionManager {

    private static final Logger logger = LoggerFactory.getLogger(PermissionManager.class);

    @Autowired
    PermissionRepository permissionRepository;

    public PermissionEntity addRole(OrganizationalUnitEntity organizationalUnit,
                                    PermissionLevelType permissionLevel) throws Exception {
        logger.info("Trying to persist role with roleName '{}' and permissionLevel '{}'",
                organizationalUnit.getName(),
                permissionLevel);

        if (permissionRepository.existsByOrganizationalUnitAndPermissionLevel(
                organizationalUnit, permissionLevel)) {
            logger.error("The role with organizationalUnit '{}' and permissionLevel '{}'already exists. " +
                            "Thus aborting add role request.",
                    organizationalUnit,
                    permissionLevel);
            throw new Exception("role already exists. Aborting add role request.");
        }

        /*
         * ID will be autogenerated by JPA / Hibernate
         */
        PermissionEntity role = new PermissionEntity();
        role.setOrganizationalUnit(organizationalUnit);
        role.setPermissionLevel(permissionLevel);
        return permissionRepository.saveAndFlush(role);
    }

    public List<RoleOverviewType> getRoles() {
        logger.info("Retrieving all roles from db");

        List<PermissionEntity> roleEntities = permissionRepository.findAll();
        List<RoleOverviewType> roles = AccessControlMapper.mapToSwaggerRoles(roleEntities);

        return roles;
    }

}
