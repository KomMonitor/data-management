package de.hsbo.kommonitor.datamanagement.api.impl.accesscontrol;

import de.hsbo.kommonitor.datamanagement.model.PermissionLevelType;
import de.hsbo.kommonitor.datamanagement.model.PermissionOverviewType;
import de.hsbo.kommonitor.datamanagement.model.PermissionResourceType;
import jakarta.transaction.Transactional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Transactional
@Repository
@Component
public class PermissionManager {

    private static final Logger logger = LoggerFactory.getLogger(PermissionManager.class);

    @Autowired
    PermissionRepository permissionRepository;

    public PermissionEntity addPermission(OrganizationalUnitEntity organizationalUnit,
                                          PermissionLevelType level,
                                          PermissionResourceType type) throws Exception {
        logger.info("Trying to persist permission for organizationalUnit '{}' and permissionLevel '{}' with type '{}'",
                organizationalUnit.getName(),
                level.getValue(),
                type.getValue());

        Optional<PermissionEntity> existing =
                permissionRepository.findByOrganizationalUnitAndPermissionLevelAndPermissionType(
                        organizationalUnit,
                        level,
                        type.getValue());

        return existing.orElseGet(() -> {
                    /*
                     * ID will be autogenerated by JPA / Hibernate
                     */
                    PermissionEntity role = new PermissionEntity();
                    role.setOrganizationalUnit(organizationalUnit);
                    role.setPermissionLevel(level);
                    role.setPermissionType(type.getValue());
                    return permissionRepository.saveAndFlush(role);
                }
        );
    }

    public List<PermissionOverviewType> getPermissions() {
        logger.info("Retrieving all roles from db");

        List<PermissionEntity> roleEntities = permissionRepository.findAll();

        return OrganizationalUnitMapper.mapToSwaggerPermissions(roleEntities);
    }

}
