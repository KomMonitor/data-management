/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.hsbo.kommonitor.datamanagement.api;

import de.hsbo.kommonitor.datamanagement.model.ProcessScriptOverviewType;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-20T01:40:06.233419477+01:00[Europe/Berlin]")
@Validated
@Tag(name = "process-scripts-public", description = "the ProcessScripts API")
public interface ProcessScriptsPublicApi {

    /**
     * GET /public/process-scripts/usingIndicatorId/{indicatorId}/scriptCode : retrieve the process script code associated to a certain public indicator as JavaScript file
     * retrieve the process script code associated to a certain public indicator as JavaScript file
     *
     * @param indicatorId unique identifier of the selected indicator dataset (required)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getProcessScriptCodeForPublicIndicator",
        summary = "retrieve the process script code associated to a certain public indicator as JavaScript file",
        description = "retrieve the process script code associated to a certain public indicator as JavaScript file",
        tags = { "process-scripts-public" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/javascript", schema = @Schema(implementation = byte[].class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/public/process-scripts/usingIndicatorId/{indicatorId}/scriptCode",
        produces = { "application/javascript" }
    )
    
    ResponseEntity<byte[]> getProcessScriptCodeForPublicIndicator(
        @Parameter(name = "indicatorId", description = "unique identifier of the selected indicator dataset", required = true, in = ParameterIn.PATH) @PathVariable("indicatorId") String indicatorId
    );


    /**
     * GET /public/process-scripts/usingIndicatorId/{indicatorId} : retrieve information about the associated process script for a certain public indicator
     * retrieve information about the associated process script for a certain indicator
     *
     * @param indicatorId unique identifier of the selected public indicator dataset (required)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getProcessScriptForPublicIndicator",
        summary = "retrieve information about the associated process script for a certain public indicator",
        description = "retrieve information about the associated process script for a certain indicator",
        tags = { "process-scripts-public" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProcessScriptOverviewType.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/public/process-scripts/usingIndicatorId/{indicatorId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<ProcessScriptOverviewType> getProcessScriptForPublicIndicator(
        @Parameter(name = "indicatorId", description = "unique identifier of the selected public indicator dataset", required = true, in = ParameterIn.PATH) @PathVariable("indicatorId") String indicatorId
    );


    /**
     * GET /public/process-scripts/{scriptId}/scriptCode : retrieve the process script code associated to a certain public indicator as JavaScript file
     * retrieve the process script code associated to a certain public indicator as JavaScript file
     *
     * @param scriptId unique identifier of the selected script (required)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getPublicProcessScriptCode",
        summary = "retrieve the process script code associated to a certain public indicator as JavaScript file",
        description = "retrieve the process script code associated to a certain public indicator as JavaScript file",
        tags = { "process-scripts-public" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/javascript", schema = @Schema(implementation = byte[].class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/public/process-scripts/{scriptId}/scriptCode",
        produces = { "application/javascript" }
    )
    
    ResponseEntity<byte[]> getPublicProcessScriptCode(
        @Parameter(name = "scriptId", description = "unique identifier of the selected script", required = true, in = ParameterIn.PATH) @PathVariable("scriptId") String scriptId
    );


    /**
     * GET /public/process-scripts/{scriptId} : retrieve information about the associated process script for a certain scriptId associated to a public indicator
     * retrieve information about the associated process script for a certain scriptId associated to a public indicator
     *
     * @param scriptId unique identifier of the selected script (required)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getPublicProcessScriptForScriptId",
        summary = "retrieve information about the associated process script for a certain scriptId associated to a public indicator",
        description = "retrieve information about the associated process script for a certain scriptId associated to a public indicator",
        tags = { "process-scripts-public" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProcessScriptOverviewType.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/public/process-scripts/{scriptId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<ProcessScriptOverviewType> getPublicProcessScriptForScriptId(
        @Parameter(name = "scriptId", description = "unique identifier of the selected script", required = true, in = ParameterIn.PATH) @PathVariable("scriptId") String scriptId
    );


    /**
     * GET /public/process-scripts : retrieve information about available process scripts associated to public indicators
     * retrieve information about available process scripts associated to public indicators
     *
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getPublicProcessScripts",
        summary = "retrieve information about available process scripts associated to public indicators",
        description = "retrieve information about available process scripts associated to public indicators",
        tags = { "process-scripts-public" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProcessScriptOverviewType.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/public/process-scripts",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<ProcessScriptOverviewType>> getPublicProcessScripts(
        
    );

}
