/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.hsbo.kommonitor.datamanagement.api;

import java.math.BigDecimal;
import de.hsbo.kommonitor.datamanagement.model.GeoresourceOverviewType;
import de.hsbo.kommonitor.datamanagement.model.GeoresourcePATCHInputType;
import de.hsbo.kommonitor.datamanagement.model.GeoresourcePOSTInputType;
import de.hsbo.kommonitor.datamanagement.model.GeoresourcePUTInputType;
import de.hsbo.kommonitor.datamanagement.model.OwnerInputType;
import de.hsbo.kommonitor.datamanagement.model.PermissionLevelInputType;
import de.hsbo.kommonitor.datamanagement.model.PermissionLevelType;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-19T12:26:09.822234300+01:00[Europe/Berlin]")
@Validated
@Tag(name = "georesources", description = "the Georesources API")
public interface GeoresourcesApi {

    /**
     * POST /georesources : Add a new geo-resource
     * Add/Register a geo-resource dataset for a certain period of time
     *
     * @param georesourcePOSTInputType feature data (required)
     * @return OK (status code 200)
     *         or Created (status code 201)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "addGeoresourceAsBody",
        summary = "Add a new geo-resource",
        description = "Add/Register a geo-resource dataset for a certain period of time",
        tags = { "georesources" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GeoresourceOverviewType.class))
            }),
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GeoresourceOverviewType.class))
            }),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found"),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/georesources",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<GeoresourceOverviewType> addGeoresourceAsBody(
        @Parameter(name = "GeoresourcePOSTInputType", description = "feature data", required = true) @Valid @RequestBody GeoresourcePOSTInputType georesourcePOSTInputType
    );


    /**
     * DELETE /georesources/{georesourceId}/allFeatures : Delete all features/contents of the selected geo-resource dataset
     * Delete all features/contents of the selected geo-resource dataset
     *
     * @param georesourceId the identifier of the geo-resource dataset (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "deleteAllGeoresourceFeaturesById",
        summary = "Delete all features/contents of the selected geo-resource dataset",
        description = "Delete all features/contents of the selected geo-resource dataset",
        tags = { "georesources" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/georesources/{georesourceId}/allFeatures"
    )
    
    ResponseEntity<Void> deleteAllGeoresourceFeaturesById(
        @Parameter(name = "georesourceId", description = "the identifier of the geo-resource dataset", required = true, in = ParameterIn.PATH) @PathVariable("georesourceId") String georesourceId
    );


    /**
     * DELETE /georesources/{georesourceId} : Delete the features/contents of the selected geo-resource dataset
     * Delete the features/contents of the selected geo-resource dataset
     *
     * @param georesourceId identifier of the geo-resource dataset (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "deleteGeoresourceById",
        summary = "Delete the features/contents of the selected geo-resource dataset",
        description = "Delete the features/contents of the selected geo-resource dataset",
        tags = { "georesources" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/georesources/{georesourceId}"
    )
    
    ResponseEntity<Void> deleteGeoresourceById(
        @Parameter(name = "georesourceId", description = "identifier of the geo-resource dataset", required = true, in = ParameterIn.PATH) @PathVariable("georesourceId") String georesourceId
    );


    /**
     * DELETE /georesources/{georesourceId}/{year}/{month}/{day} : Delete the features/contents of the selected geo-resource dataset, selected by year and month
     * Delete the features/contents of the selected geo-resource dataset, selected by year and month
     *
     * @param georesourceId identifier of the geo-resource dataset (required)
     * @param year year for which datasets shall be queried (required)
     * @param month month for which datasets shall be queried (required)
     * @param day day for which datasets shall be queried (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "deleteGeoresourceByIdAndYearAndMonth",
        summary = "Delete the features/contents of the selected geo-resource dataset, selected by year and month",
        description = "Delete the features/contents of the selected geo-resource dataset, selected by year and month",
        tags = { "georesources" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/georesources/{georesourceId}/{year}/{month}/{day}"
    )
    
    ResponseEntity<Void> deleteGeoresourceByIdAndYearAndMonth(
        @Parameter(name = "georesourceId", description = "identifier of the geo-resource dataset", required = true, in = ParameterIn.PATH) @PathVariable("georesourceId") String georesourceId,
        @Parameter(name = "year", description = "year for which datasets shall be queried", required = true, in = ParameterIn.PATH) @PathVariable("year") BigDecimal year,
        @Parameter(name = "month", description = "month for which datasets shall be queried", required = true, in = ParameterIn.PATH) @PathVariable("month") BigDecimal month,
        @Parameter(name = "day", description = "day for which datasets shall be queried", required = true, in = ParameterIn.PATH) @PathVariable("day") BigDecimal day
    );


    /**
     * DELETE /georesources/{georesourceId}/singleFeature/{featureId} : Delete all database records for the specified feature of the selected geo-resource dataset
     * Delete all database records for the specified feature of the selected geo-resource dataset
     *
     * @param georesourceId the identifier of the geo-resource dataset (required)
     * @param featureId the identifier of the geo-resource dataset feature (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "deleteSingleGeoresourceFeatureById",
        summary = "Delete all database records for the specified feature of the selected geo-resource dataset",
        description = "Delete all database records for the specified feature of the selected geo-resource dataset",
        tags = { "georesources" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/georesources/{georesourceId}/singleFeature/{featureId}"
    )
    
    ResponseEntity<Void> deleteSingleGeoresourceFeatureById(
        @Parameter(name = "georesourceId", description = "the identifier of the geo-resource dataset", required = true, in = ParameterIn.PATH) @PathVariable("georesourceId") String georesourceId,
        @Parameter(name = "featureId", description = "the identifier of the geo-resource dataset feature", required = true, in = ParameterIn.PATH) @PathVariable("featureId") String featureId
    );


    /**
     * DELETE /georesources/{georesourceId}/singleFeature/{featureId}/singleFeatureRecord/{featureRecordId} : Delete single feature database record specified by its unique database primary key id for the specified feature of the selected geo-resource dataset
     * Delete single feature database record specified by its unique database primary key id for the specified feature of the selected geo-resource dataset
     *
     * @param georesourceId the identifier of the geo-resource dataset (required)
     * @param featureId the identifier of the geo-resource dataset feature (required)
     * @param featureRecordId the unique database record identifier of the geo-resource dataset feature - multiple records may exist for the same real world object if they apply to different periods of validity (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "deleteSingleGeoresourceFeatureRecordById",
        summary = "Delete single feature database record specified by its unique database primary key id for the specified feature of the selected geo-resource dataset",
        description = "Delete single feature database record specified by its unique database primary key id for the specified feature of the selected geo-resource dataset",
        tags = { "georesources" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/georesources/{georesourceId}/singleFeature/{featureId}/singleFeatureRecord/{featureRecordId}"
    )
    
    ResponseEntity<Void> deleteSingleGeoresourceFeatureRecordById(
        @Parameter(name = "georesourceId", description = "the identifier of the geo-resource dataset", required = true, in = ParameterIn.PATH) @PathVariable("georesourceId") String georesourceId,
        @Parameter(name = "featureId", description = "the identifier of the geo-resource dataset feature", required = true, in = ParameterIn.PATH) @PathVariable("featureId") String featureId,
        @Parameter(name = "featureRecordId", description = "the unique database record identifier of the geo-resource dataset feature - multiple records may exist for the same real world object if they apply to different periods of validity", required = true, in = ParameterIn.PATH) @PathVariable("featureRecordId") String featureRecordId
    );


    /**
     * GET /georesources/{georesourceId}/allFeatures : retrieve all feature entries for all applicable periods of validity for the selected geo-resource dataset (hence might contain each feature multiple times if they exist for different periods of validity)
     * retrieve all feature entries for all applicable periods of validity for the selected geo-resource dataset (hence might contain each feature multiple times if they exist for different periods of validity)
     *
     * @param georesourceId the identifier of the geo-resource dataset (required)
     * @param simplifyGeometries Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from &#39;weak&#39; to &#39;strong&#39;, while &#39;original&#39; will return original feature geometries without any simplification.\&quot; (optional, default to original)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getAllGeoresourceFeaturesById",
        summary = "retrieve all feature entries for all applicable periods of validity for the selected geo-resource dataset (hence might contain each feature multiple times if they exist for different periods of validity)",
        description = "retrieve all feature entries for all applicable periods of validity for the selected geo-resource dataset (hence might contain each feature multiple times if they exist for different periods of validity)",
        tags = { "georesources" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = byte[].class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/georesources/{georesourceId}/allFeatures",
        produces = { "application/json" }
    )
    
    ResponseEntity<byte[]> getAllGeoresourceFeaturesById(
        @Parameter(name = "georesourceId", description = "the identifier of the geo-resource dataset", required = true, in = ParameterIn.PATH) @PathVariable("georesourceId") String georesourceId,
        @Parameter(name = "simplifyGeometries", description = "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification.\"", in = ParameterIn.QUERY) @Valid @RequestParam(value = "simplifyGeometries", required = false, defaultValue = "original") String simplifyGeometries
    );


    /**
     * GET /georesources/{georesourceId}/allFeatures/without-geometry : retrieve only the properties without geometry of all feature entries for all applicable periods of validity for the selected public geo-resource dataset (hence might contain each feature multiple times if they exist for different periods of validity)
     * retrieve only the properties without geometry of all feature entries for all applicable periods of validity for the selected public geo-resource dataset (hence might contain each feature multiple times if they exist for different periods of validity)
     *
     * @param georesourceId georesourceId (required)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getAllGeoresourceFeaturesByIdWithoutGeometry",
        summary = "retrieve only the properties without geometry of all feature entries for all applicable periods of validity for the selected public geo-resource dataset (hence might contain each feature multiple times if they exist for different periods of validity)",
        description = "retrieve only the properties without geometry of all feature entries for all applicable periods of validity for the selected public geo-resource dataset (hence might contain each feature multiple times if they exist for different periods of validity)",
        tags = { "georesources" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = byte[].class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/georesources/{georesourceId}/allFeatures/without-geometry",
        produces = { "application/json" }
    )
    
    ResponseEntity<byte[]> getAllGeoresourceFeaturesByIdWithoutGeometry(
        @Parameter(name = "georesourceId", description = "georesourceId", required = true, in = ParameterIn.PATH) @PathVariable("georesourceId") String georesourceId
    );


    /**
     * GET /georesources/{georesourceId} : retrieve information about available features of the selected geo-resource dataset
     * retrieve information about available features of the selected geo-resource dataset
     *
     * @param georesourceId identifier of the geo-resource dataset (required)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getGeoresourceById",
        summary = "retrieve information about available features of the selected geo-resource dataset",
        description = "retrieve information about available features of the selected geo-resource dataset",
        tags = { "georesources" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GeoresourceOverviewType.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/georesources/{georesourceId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<GeoresourceOverviewType> getGeoresourceById(
        @Parameter(name = "georesourceId", description = "identifier of the geo-resource dataset", required = true, in = ParameterIn.PATH) @PathVariable("georesourceId") String georesourceId
    );


    /**
     * GET /georesources/{georesourceId}/{year}/{month}/{day} : retrieve the features according to the selected geo-resource dataset and selected year and month as GeoJSON
     * retrieve the features according to the selected geo-resource dataset and selected year and month as GeoJSON
     *
     * @param georesourceId identifier of the geo-resource dataset (required)
     * @param year year for which datasets shall be queried (required)
     * @param month month for which datasets shall be queried (required)
     * @param day day for which datasets shall be queried (required)
     * @param simplifyGeometries Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from &#39;weak&#39; to &#39;strong&#39;, while &#39;original&#39; will return original feature geometries without any simplification. (optional, default to original)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getGeoresourceByIdAndYearAndMonth",
        summary = "retrieve the features according to the selected geo-resource dataset and selected year and month as GeoJSON",
        description = "retrieve the features according to the selected geo-resource dataset and selected year and month as GeoJSON",
        tags = { "georesources" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/octed-stream", schema = @Schema(implementation = byte[].class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/georesources/{georesourceId}/{year}/{month}/{day}",
        produces = { "application/octed-stream" }
    )
    
    ResponseEntity<byte[]> getGeoresourceByIdAndYearAndMonth(
        @Parameter(name = "georesourceId", description = "identifier of the geo-resource dataset", required = true, in = ParameterIn.PATH) @PathVariable("georesourceId") String georesourceId,
        @Parameter(name = "year", description = "year for which datasets shall be queried", required = true, in = ParameterIn.PATH) @PathVariable("year") BigDecimal year,
        @Parameter(name = "month", description = "month for which datasets shall be queried", required = true, in = ParameterIn.PATH) @PathVariable("month") BigDecimal month,
        @Parameter(name = "day", description = "day for which datasets shall be queried", required = true, in = ParameterIn.PATH) @PathVariable("day") BigDecimal day,
        @Parameter(name = "simplifyGeometries", description = "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "simplifyGeometries", required = false, defaultValue = "original") String simplifyGeometries
    );


    /**
     * GET /georesources/{georesourceId}/{year}/{month}/{day}/without-geometry : retrieve only the properties without geometry of the features according to the selected public geo-resource dataset and selected year and month as GeoJSON
     * retrieve only the properties without geometry of the features according to the selected public geo-resource dataset and selected year and month as GeoJSON
     *
     * @param georesourceId georesourceId (required)
     * @param year year (required)
     * @param month month (required)
     * @param day day (required)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getGeoresourceByIdAndYearAndMonthWithoutGeometry",
        summary = "retrieve only the properties without geometry of the features according to the selected public geo-resource dataset and selected year and month as GeoJSON",
        description = "retrieve only the properties without geometry of the features according to the selected public geo-resource dataset and selected year and month as GeoJSON",
        tags = { "georesources" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/octed-stream", schema = @Schema(implementation = byte[].class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/georesources/{georesourceId}/{year}/{month}/{day}/without-geometry",
        produces = { "application/octed-stream" }
    )
    
    ResponseEntity<byte[]> getGeoresourceByIdAndYearAndMonthWithoutGeometry(
        @Parameter(name = "georesourceId", description = "georesourceId", required = true, in = ParameterIn.PATH) @PathVariable("georesourceId") String georesourceId,
        @Parameter(name = "year", description = "year", required = true, in = ParameterIn.PATH) @PathVariable("year") BigDecimal year,
        @Parameter(name = "month", description = "month", required = true, in = ParameterIn.PATH) @PathVariable("month") BigDecimal month,
        @Parameter(name = "day", description = "day", required = true, in = ParameterIn.PATH) @PathVariable("day") BigDecimal day
    );


    /**
     * GET /georesources/{georesourceId}/permissions : retrieve information about the permissions for the selected geo-resource dataset
     * retrieve information about the permissions for the selected geo-resource dataset
     *
     * @param georesourceId identifier of the geo-resource dataset (required)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getGeoresourcePermissionsById",
        summary = "retrieve information about the permissions for the selected geo-resource dataset",
        description = "retrieve information about the permissions for the selected geo-resource dataset",
        tags = { "georesources" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PermissionLevelType.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/georesources/{georesourceId}/permissions",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<PermissionLevelType>> getGeoresourcePermissionsById(
        @Parameter(name = "georesourceId", description = "identifier of the geo-resource dataset", required = true, in = ParameterIn.PATH) @PathVariable("georesourceId") String georesourceId
    );


    /**
     * GET /georesources/{georesourceId}/schema : retrieve the JSON schema for the selected geo-resource dataset
     * retrieve the JSON schema for the selected geo-resource dataset. The JSON schema indicates the property structure of the dataset.
     *
     * @param georesourceId the identifier of the geo-resource dataset (required)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getGeoresourceSchemaByLevel",
        summary = "retrieve the JSON schema for the selected geo-resource dataset",
        description = "retrieve the JSON schema for the selected geo-resource dataset. The JSON schema indicates the property structure of the dataset.",
        tags = { "georesources" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/georesources/{georesourceId}/schema",
        produces = { "application/json" }
    )
    
    ResponseEntity<String> getGeoresourceSchemaByLevel(
        @Parameter(name = "georesourceId", description = "the identifier of the geo-resource dataset", required = true, in = ParameterIn.PATH) @PathVariable("georesourceId") String georesourceId
    );


    /**
     * GET /georesources : retrieve information about available features of different geo-resource datasets
     * retrieve information about available features of different geo-resource datasets
     *
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getGeoresources",
        summary = "retrieve information about available features of different geo-resource datasets",
        description = "retrieve information about available features of different geo-resource datasets",
        tags = { "georesources" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GeoresourceOverviewType.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/georesources",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<GeoresourceOverviewType>> getGeoresources(
        
    );


    /**
     * GET /georesources/{georesourceId}/singleFeature/{featureId} : retrieve single feature database records for all applicable periods of validity for the selected geo-resource dataset (hence might contain the target feature multiple times if it exists for different periods of validity)
     * retrieve single feature database records for all applicable periods of validity for the selected geo-resource dataset (hence might contain the target feature multiple times if it exists for different periods of validity)
     *
     * @param georesourceId the identifier of the geo-resource dataset (required)
     * @param featureId the identifier of the geo-resource dataset feature (required)
     * @param simplifyGeometries Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from &#39;weak&#39; to &#39;strong&#39;, while &#39;original&#39; will return original feature geometries without any simplification.\&quot; (optional, default to original)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getSingleGeoresourceFeatureById",
        summary = "retrieve single feature database records for all applicable periods of validity for the selected geo-resource dataset (hence might contain the target feature multiple times if it exists for different periods of validity)",
        description = "retrieve single feature database records for all applicable periods of validity for the selected geo-resource dataset (hence might contain the target feature multiple times if it exists for different periods of validity)",
        tags = { "georesources" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = byte[].class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/georesources/{georesourceId}/singleFeature/{featureId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<byte[]> getSingleGeoresourceFeatureById(
        @Parameter(name = "georesourceId", description = "the identifier of the geo-resource dataset", required = true, in = ParameterIn.PATH) @PathVariable("georesourceId") String georesourceId,
        @Parameter(name = "featureId", description = "the identifier of the geo-resource dataset feature", required = true, in = ParameterIn.PATH) @PathVariable("featureId") String featureId,
        @Parameter(name = "simplifyGeometries", description = "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification.\"", in = ParameterIn.QUERY) @Valid @RequestParam(value = "simplifyGeometries", required = false, defaultValue = "original") String simplifyGeometries
    );


    /**
     * GET /georesources/{georesourceId}/singleFeature/{featureId}/singleFeatureRecord/{featureRecordId} : retrieve single feature database record specified by its unique database primary key id
     * retrieve single feature database record specified by its unique database primary key id
     *
     * @param georesourceId the identifier of the geo-resource dataset (required)
     * @param featureId the identifier of the geo-resource dataset feature (required)
     * @param featureRecordId the unique database record identifier of the geo-resource dataset feature - multiple records may exist for the same real world object if they apply to different periods of validity (required)
     * @param simplifyGeometries Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from &#39;weak&#39; to &#39;strong&#39;, while &#39;original&#39; will return original feature geometries without any simplification.\&quot; (optional, default to original)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getSingleGeoresourceFeatureRecordById",
        summary = "retrieve single feature database record specified by its unique database primary key id",
        description = "retrieve single feature database record specified by its unique database primary key id",
        tags = { "georesources" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = byte[].class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/georesources/{georesourceId}/singleFeature/{featureId}/singleFeatureRecord/{featureRecordId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<byte[]> getSingleGeoresourceFeatureRecordById(
        @Parameter(name = "georesourceId", description = "the identifier of the geo-resource dataset", required = true, in = ParameterIn.PATH) @PathVariable("georesourceId") String georesourceId,
        @Parameter(name = "featureId", description = "the identifier of the geo-resource dataset feature", required = true, in = ParameterIn.PATH) @PathVariable("featureId") String featureId,
        @Parameter(name = "featureRecordId", description = "the unique database record identifier of the geo-resource dataset feature - multiple records may exist for the same real world object if they apply to different periods of validity", required = true, in = ParameterIn.PATH) @PathVariable("featureRecordId") String featureRecordId,
        @Parameter(name = "simplifyGeometries", description = "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification.\"", in = ParameterIn.QUERY) @Valid @RequestParam(value = "simplifyGeometries", required = false, defaultValue = "original") String simplifyGeometries
    );


    /**
     * PUT /georesources/{georesourceId} : Modify/Update the features of the selected geo-resource dataset
     * Modify/Update the features of the selected geo-resource dataset.  The interface expects a full upload of all geometries for the spatial unit. Internally, those geometries are compared to the existing ones to mark &#39;old&#39; geometries that are no longer in use as outdated. Hence, each geometric object is only persisted once and its use is controlled by time validity marks.
     *
     * @param georesourceId identifier of the geo-resource dataset (required)
     * @param featureData feature data (required)
     * @return OK (status code 200)
     *         or Created (status code 201)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "updateGeoresourceAsBody",
        summary = "Modify/Update the features of the selected geo-resource dataset",
        description = "Modify/Update the features of the selected geo-resource dataset.  The interface expects a full upload of all geometries for the spatial unit. Internally, those geometries are compared to the existing ones to mark 'old' geometries that are no longer in use as outdated. Hence, each geometric object is only persisted once and its use is controlled by time validity marks.",
        tags = { "georesources" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "201", description = "Created"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found"),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/georesources/{georesourceId}",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> updateGeoresourceAsBody(
        @Parameter(name = "georesourceId", description = "identifier of the geo-resource dataset", required = true, in = ParameterIn.PATH) @PathVariable("georesourceId") String georesourceId,
        @Parameter(name = "featureData", description = "feature data", required = true) @Valid @RequestBody GeoresourcePUTInputType featureData
    );


    /**
     * PUT /georesources/{georesourceId}/singleFeature/{featureId}/singleFeatureRecord/{featureRecordId} : Modify/Update the feature record of the selected georesource dataset feature
     * Modify/Update the feature record of the selected georesource dataset feature
     *
     * @param georesourceId the identifier of the geo-resource dataset (required)
     * @param featureId the identifier of the geo-resource dataset feature (required)
     * @param featureRecordId the unique database record identifier of the geo-resource dataset feature - multiple records may exist for the same real world object if they apply to different periods of validity (required)
     * @param georesourceFeatureRecordData georesource feature record data (required)
     * @return OK - Updated (status code 200)
     *         or Created (status code 201)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "updateGeoresourceFeatureRecordAsBody",
        summary = "Modify/Update the feature record of the selected georesource dataset feature",
        description = "Modify/Update the feature record of the selected georesource dataset feature",
        tags = { "georesources" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK - Updated"),
            @ApiResponse(responseCode = "201", description = "Created"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found"),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/georesources/{georesourceId}/singleFeature/{featureId}/singleFeatureRecord/{featureRecordId}",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> updateGeoresourceFeatureRecordAsBody(
        @Parameter(name = "georesourceId", description = "the identifier of the geo-resource dataset", required = true, in = ParameterIn.PATH) @PathVariable("georesourceId") String georesourceId,
        @Parameter(name = "featureId", description = "the identifier of the geo-resource dataset feature", required = true, in = ParameterIn.PATH) @PathVariable("featureId") String featureId,
        @Parameter(name = "featureRecordId", description = "the unique database record identifier of the geo-resource dataset feature - multiple records may exist for the same real world object if they apply to different periods of validity", required = true, in = ParameterIn.PATH) @PathVariable("featureRecordId") String featureRecordId,
        @Parameter(name = "georesourceFeatureRecordData", description = "georesource feature record data", required = true) @Valid @RequestBody String georesourceFeatureRecordData
    );


    /**
     * PATCH /georesources/{georesourceId} : Modify/Update the metadata of the selected geo-resource dataset
     * Modify/Update the metadata of the selected geo-resource dataset. This replaces the formerly stored metadata.
     *
     * @param georesourceId identifier of the geo-resource dataset (required)
     * @param metadata metadata input (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "updateGeoresourceMetadataAsBody",
        summary = "Modify/Update the metadata of the selected geo-resource dataset",
        description = "Modify/Update the metadata of the selected geo-resource dataset. This replaces the formerly stored metadata.",
        tags = { "georesources" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/georesources/{georesourceId}",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> updateGeoresourceMetadataAsBody(
        @Parameter(name = "georesourceId", description = "identifier of the geo-resource dataset", required = true, in = ParameterIn.PATH) @PathVariable("georesourceId") String georesourceId,
        @Parameter(name = "metadata", description = "metadata input", required = true) @Valid @RequestBody GeoresourcePATCHInputType metadata
    );


    /**
     * PUT /georesources/{georesourceId}/ownership : update the ownership for the selected geo-resource dataset
     * update the ownership for the selected geo-resource dataset
     *
     * @param georesourceId identifier of the geo-resource dataset (required)
     * @param ownerInputType GeoResource ownership input (optional)
     * @return No Content (status code 204)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "updateGeoresourceOwnership",
        summary = "update the ownership for the selected geo-resource dataset",
        description = "update the ownership for the selected geo-resource dataset",
        tags = { "georesources" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/georesources/{georesourceId}/ownership",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> updateGeoresourceOwnership(
        @Parameter(name = "georesourceId", description = "identifier of the geo-resource dataset", required = true, in = ParameterIn.PATH) @PathVariable("georesourceId") String georesourceId,
        @Parameter(name = "OwnerInputType", description = "GeoResource ownership input") @Valid @RequestBody(required = false) OwnerInputType ownerInputType
    );


    /**
     * PUT /georesources/{georesourceId}/permissions : update the permissions for the selected geo-resource dataset
     * update the permissions for the selected geo-resource dataset
     *
     * @param georesourceId identifier of the geo-resource dataset (required)
     * @param permissionLevelInputType GeoResource permission level input (optional)
     * @return No Content (status code 204)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "updateGeoresourcePermissions",
        summary = "update the permissions for the selected geo-resource dataset",
        description = "update the permissions for the selected geo-resource dataset",
        tags = { "georesources" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/georesources/{georesourceId}/permissions",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> updateGeoresourcePermissions(
        @Parameter(name = "georesourceId", description = "identifier of the geo-resource dataset", required = true, in = ParameterIn.PATH) @PathVariable("georesourceId") String georesourceId,
        @Parameter(name = "PermissionLevelInputType", description = "GeoResource permission level input") @Valid @RequestBody(required = false) PermissionLevelInputType permissionLevelInputType
    );

}
