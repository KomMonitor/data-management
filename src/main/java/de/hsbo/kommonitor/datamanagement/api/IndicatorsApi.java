/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.hsbo.kommonitor.datamanagement.api;

import java.math.BigDecimal;
import de.hsbo.kommonitor.datamanagement.model.IndicatorMetadataPATCHInputType;
import de.hsbo.kommonitor.datamanagement.model.IndicatorOverviewType;
import de.hsbo.kommonitor.datamanagement.model.IndicatorPATCHDisplayOrderInputType;
import de.hsbo.kommonitor.datamanagement.model.IndicatorPATCHInputType;
import de.hsbo.kommonitor.datamanagement.model.IndicatorPOSTInputType;
import de.hsbo.kommonitor.datamanagement.model.IndicatorPUTInputType;
import java.util.Map;
import de.hsbo.kommonitor.datamanagement.model.PermissionLevelType;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-12-13T08:47:12.320115200+01:00[Europe/Berlin]")
@Validated
@Tag(name = "indicators", description = "the Indicators API")
public interface IndicatorsApi {

    /**
     * POST /indicators : Add a new indicator dataset
     * Add/Register an indicator dataset for a certain period of time and spatial unit/level
     *
     * @param indicatorData indicator data (required)
     * @return OK (status code 200)
     *         or Created (status code 201)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "addIndicatorAsBody",
        summary = "Add a new indicator dataset",
        description = "Add/Register an indicator dataset for a certain period of time and spatial unit/level",
        tags = { "indicators" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = IndicatorOverviewType.class))
            }),
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = IndicatorOverviewType.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found"),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/indicators",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<IndicatorOverviewType> addIndicatorAsBody(
        @Parameter(name = "indicatorData", description = "indicator data", required = true) @Valid @RequestBody IndicatorPOSTInputType indicatorData
    );


    /**
     * DELETE /indicators/{indicatorId} : Delete the features/contents of the selected indicator dataset
     * Delete the features/contents of the selected indicator dataset
     *
     * @param indicatorId unique identifier of the selected indicator dataset (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "deleteIndicatorById",
        summary = "Delete the features/contents of the selected indicator dataset",
        description = "Delete the features/contents of the selected indicator dataset",
        tags = { "indicators" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/indicators/{indicatorId}"
    )
    
    ResponseEntity<Void> deleteIndicatorById(
        @Parameter(name = "indicatorId", description = "unique identifier of the selected indicator dataset", required = true, in = ParameterIn.PATH) @PathVariable("indicatorId") String indicatorId
    );


    /**
     * DELETE /indicators/{indicatorId}/{spatialUnitId} : Delete the features/contents of the selected indicator dataset for the selected spatial unit
     * Delete the features/contents of the selected indicator dataset for the selected spatial unit
     *
     * @param indicatorId unique identifier of the selected indicator dataset (required)
     * @param spatialUnitId the unique identifier of the spatial level (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "deleteIndicatorByIdAndSpatialUnitId",
        summary = "Delete the features/contents of the selected indicator dataset for the selected spatial unit",
        description = "Delete the features/contents of the selected indicator dataset for the selected spatial unit",
        tags = { "indicators" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/indicators/{indicatorId}/{spatialUnitId}"
    )
    
    ResponseEntity<Void> deleteIndicatorByIdAndSpatialUnitId(
        @Parameter(name = "indicatorId", description = "unique identifier of the selected indicator dataset", required = true, in = ParameterIn.PATH) @PathVariable("indicatorId") String indicatorId,
        @Parameter(name = "spatialUnitId", description = "the unique identifier of the spatial level", required = true, in = ParameterIn.PATH) @PathVariable("spatialUnitId") String spatialUnitId
    );


    /**
     * DELETE /indicators/{indicatorId}/{spatialUnitId}/{year}/{month}/{day} : Delete the features/contents of the selected indicator dataset, selected by year and month
     * Delete the features/contents of the selected indicator dataset, selected by year and month
     *
     * @param indicatorId unique identifier of the selected indicator dataset (required)
     * @param spatialUnitId the unique identifier of the spatial level (required)
     * @param year year for which the indicator shall be queried (required)
     * @param month month for which the indicator shall be queried (required)
     * @param day day for which datasets shall be queried (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "deleteIndicatorByIdAndYearAndMonth",
        summary = "Delete the features/contents of the selected indicator dataset, selected by year and month",
        description = "Delete the features/contents of the selected indicator dataset, selected by year and month",
        tags = { "indicators" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/indicators/{indicatorId}/{spatialUnitId}/{year}/{month}/{day}"
    )
    
    ResponseEntity<Void> deleteIndicatorByIdAndYearAndMonth(
        @Parameter(name = "indicatorId", description = "unique identifier of the selected indicator dataset", required = true, in = ParameterIn.PATH) @PathVariable("indicatorId") String indicatorId,
        @Parameter(name = "spatialUnitId", description = "the unique identifier of the spatial level", required = true, in = ParameterIn.PATH) @PathVariable("spatialUnitId") String spatialUnitId,
        @Parameter(name = "year", description = "year for which the indicator shall be queried", required = true, in = ParameterIn.PATH) @PathVariable("year") BigDecimal year,
        @Parameter(name = "month", description = "month for which the indicator shall be queried", required = true, in = ParameterIn.PATH) @PathVariable("month") BigDecimal month,
        @Parameter(name = "day", description = "day for which datasets shall be queried", required = true, in = ParameterIn.PATH) @PathVariable("day") BigDecimal day
    );


    /**
     * DELETE /indicators/{indicatorId}/{spatialUnitId}/singleFeature/{featureId} : Delete all database records for the specified feature of the selected indicator dataset
     * Delete all database records for the specified feature of the selected indicator dataset
     *
     * @param indicatorId unique identifier of the selected indicator dataset (required)
     * @param spatialUnitId the unique identifier of the spatial level (required)
     * @param featureId the identifier of the indicator dataset spatial feature (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "deleteSingleIndicatorFeatureById",
        summary = "Delete all database records for the specified feature of the selected indicator dataset",
        description = "Delete all database records for the specified feature of the selected indicator dataset",
        tags = { "indicators" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/indicators/{indicatorId}/{spatialUnitId}/singleFeature/{featureId}"
    )
    
    ResponseEntity<Void> deleteSingleIndicatorFeatureById(
        @Parameter(name = "indicatorId", description = "unique identifier of the selected indicator dataset", required = true, in = ParameterIn.PATH) @PathVariable("indicatorId") String indicatorId,
        @Parameter(name = "spatialUnitId", description = "the unique identifier of the spatial level", required = true, in = ParameterIn.PATH) @PathVariable("spatialUnitId") String spatialUnitId,
        @Parameter(name = "featureId", description = "the identifier of the indicator dataset spatial feature", required = true, in = ParameterIn.PATH) @PathVariable("featureId") String featureId
    );


    /**
     * DELETE /indicators/{indicatorId}/{spatialUnitId}/singleFeature/{featureId}/singleFeatureRecord/{featureRecordId} : Delete single feature database record specified by its unique database primary key id for the specified feature of the selected indicator dataset
     * Delete single feature database record specified by its unique database primary key id for the specified feature of the selected indicator dataset
     *
     * @param indicatorId unique identifier of the selected indicator dataset (required)
     * @param spatialUnitId the unique identifier of the spatial level (required)
     * @param featureId the identifier of the indicator dataset feature (required)
     * @param featureRecordId the unique database record identifier of the indicator dataset feature - multiple records may exist for the same real world object if they apply to different periods of validity (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "deleteSingleIndicatorFeatureRecordById",
        summary = "Delete single feature database record specified by its unique database primary key id for the specified feature of the selected indicator dataset",
        description = "Delete single feature database record specified by its unique database primary key id for the specified feature of the selected indicator dataset",
        tags = { "indicators" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/indicators/{indicatorId}/{spatialUnitId}/singleFeature/{featureId}/singleFeatureRecord/{featureRecordId}"
    )
    
    ResponseEntity<Void> deleteSingleIndicatorFeatureRecordById(
        @Parameter(name = "indicatorId", description = "unique identifier of the selected indicator dataset", required = true, in = ParameterIn.PATH) @PathVariable("indicatorId") String indicatorId,
        @Parameter(name = "spatialUnitId", description = "the unique identifier of the spatial level", required = true, in = ParameterIn.PATH) @PathVariable("spatialUnitId") String spatialUnitId,
        @Parameter(name = "featureId", description = "the identifier of the indicator dataset feature", required = true, in = ParameterIn.PATH) @PathVariable("featureId") String featureId,
        @Parameter(name = "featureRecordId", description = "the unique database record identifier of the indicator dataset feature - multiple records may exist for the same real world object if they apply to different periods of validity", required = true, in = ParameterIn.PATH) @PathVariable("featureRecordId") String featureRecordId
    );


    /**
     * GET /indicators/{indicatorId} : retrieve information about the selected indicator
     * retrieve information about the selected indicator
     *
     * @param indicatorId unique identifier of the selected indicator dataset (required)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getIndicatorById",
        summary = "retrieve information about the selected indicator",
        description = "retrieve information about the selected indicator",
        tags = { "indicators" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IndicatorOverviewType.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/indicators/{indicatorId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<IndicatorOverviewType> getIndicatorById(
        @Parameter(name = "indicatorId", description = "unique identifier of the selected indicator dataset", required = true, in = ParameterIn.PATH) @PathVariable("indicatorId") String indicatorId
    );


    /**
     * GET /indicators/{indicatorId}/{spatialUnitId} : retrieve the indicator for the selected spatial unit as GeoJSON
     * retrieve the indicator for the selected spatial unit as GeoJSON
     *
     * @param indicatorId unique identifier of the selected indicator dataset (required)
     * @param spatialUnitId the unique identifier of the spatial level (required)
     * @param simplifyGeometries Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from &#39;weak&#39; to &#39;strong&#39;, while &#39;original&#39; will return original feature geometries without any simplification. (optional, default to original)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getIndicatorBySpatialUnitIdAndId",
        summary = "retrieve the indicator for the selected spatial unit as GeoJSON",
        description = "retrieve the indicator for the selected spatial unit as GeoJSON",
        tags = { "indicators" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/octed-stream", schema = @Schema(implementation = byte[].class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/indicators/{indicatorId}/{spatialUnitId}",
        produces = { "application/octed-stream" }
    )
    
    ResponseEntity<byte[]> getIndicatorBySpatialUnitIdAndId(
        @Parameter(name = "indicatorId", description = "unique identifier of the selected indicator dataset", required = true, in = ParameterIn.PATH) @PathVariable("indicatorId") String indicatorId,
        @Parameter(name = "spatialUnitId", description = "the unique identifier of the spatial level", required = true, in = ParameterIn.PATH) @PathVariable("spatialUnitId") String spatialUnitId,
        @Parameter(name = "simplifyGeometries", description = "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "simplifyGeometries", required = false, defaultValue = "original") String simplifyGeometries
    );


    /**
     * GET /indicators/{indicatorId}/{spatialUnitId}/{year}/{month}/{day} : retrieve the indicator for the selected spatial unit, year and month as GeoJSON
     * retrieve the indicator for the selected spatial unit, year and month as GeoJSON
     *
     * @param indicatorId unique identifier of the selected indicator dataset (required)
     * @param spatialUnitId the unique identifier of the spatial level (required)
     * @param year year for which the indicator shall be queried (required)
     * @param month month for which the indicator shall be queried (required)
     * @param day day for which datasets shall be queried (required)
     * @param simplifyGeometries Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from &#39;weak&#39; to &#39;strong&#39;, while &#39;original&#39; will return original feature geometries without any simplification.\&quot; (optional, default to original)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getIndicatorBySpatialUnitIdAndIdAndYearAndMonth",
        summary = "retrieve the indicator for the selected spatial unit, year and month as GeoJSON",
        description = "retrieve the indicator for the selected spatial unit, year and month as GeoJSON",
        tags = { "indicators" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/octed-stream", schema = @Schema(implementation = byte[].class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/indicators/{indicatorId}/{spatialUnitId}/{year}/{month}/{day}",
        produces = { "application/octed-stream" }
    )
    
    ResponseEntity<byte[]> getIndicatorBySpatialUnitIdAndIdAndYearAndMonth(
        @Parameter(name = "indicatorId", description = "unique identifier of the selected indicator dataset", required = true, in = ParameterIn.PATH) @PathVariable("indicatorId") String indicatorId,
        @Parameter(name = "spatialUnitId", description = "the unique identifier of the spatial level", required = true, in = ParameterIn.PATH) @PathVariable("spatialUnitId") String spatialUnitId,
        @Parameter(name = "year", description = "year for which the indicator shall be queried", required = true, in = ParameterIn.PATH) @PathVariable("year") BigDecimal year,
        @Parameter(name = "month", description = "month for which the indicator shall be queried", required = true, in = ParameterIn.PATH) @PathVariable("month") BigDecimal month,
        @Parameter(name = "day", description = "day for which datasets shall be queried", required = true, in = ParameterIn.PATH) @PathVariable("day") BigDecimal day,
        @Parameter(name = "simplifyGeometries", description = "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification.\"", in = ParameterIn.QUERY) @Valid @RequestParam(value = "simplifyGeometries", required = false, defaultValue = "original") String simplifyGeometries
    );


    /**
     * GET /indicators/{indicatorId}/{spatialUnitId}/{year}/{month}/{day}/without-geometry : retrieve the indicator values and other properties for the selected spatial unit, year and month. It does not include the spatial geometries!
     * retrieve the indicator values and other properties for the selected spatial unit, year and month. It does not include the spatial geometries!
     *
     * @param indicatorId unique identifier of the selected indicator dataset (required)
     * @param spatialUnitId the unique identifier of the spatial level (required)
     * @param year year for which the indicator shall be queried (required)
     * @param month month for which the indicator shall be queried (required)
     * @param day day for which datasets shall be queried (required)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getIndicatorBySpatialUnitIdAndIdAndYearAndMonthWithoutGeometry",
        summary = "retrieve the indicator values and other properties for the selected spatial unit, year and month. It does not include the spatial geometries!",
        description = "retrieve the indicator values and other properties for the selected spatial unit, year and month. It does not include the spatial geometries!",
        tags = { "indicators" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/indicators/{indicatorId}/{spatialUnitId}/{year}/{month}/{day}/without-geometry",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Map<String, String>>> getIndicatorBySpatialUnitIdAndIdAndYearAndMonthWithoutGeometry(
        @Parameter(name = "indicatorId", description = "unique identifier of the selected indicator dataset", required = true, in = ParameterIn.PATH) @PathVariable("indicatorId") String indicatorId,
        @Parameter(name = "spatialUnitId", description = "the unique identifier of the spatial level", required = true, in = ParameterIn.PATH) @PathVariable("spatialUnitId") String spatialUnitId,
        @Parameter(name = "year", description = "year for which the indicator shall be queried", required = true, in = ParameterIn.PATH) @PathVariable("year") BigDecimal year,
        @Parameter(name = "month", description = "month for which the indicator shall be queried", required = true, in = ParameterIn.PATH) @PathVariable("month") BigDecimal month,
        @Parameter(name = "day", description = "day for which datasets shall be queried", required = true, in = ParameterIn.PATH) @PathVariable("day") BigDecimal day
    );


    /**
     * GET /indicators/{indicatorId}/{spatialUnitId}/without-geometry : retrieve the indicator values and other properties for the selected spatial unit. It does not include the spatial geometries!
     * retrieve the indicator values and other properties for the selected spatial unit. It does not include the spatial geometries!
     *
     * @param indicatorId unique identifier of the selected indicator dataset (required)
     * @param spatialUnitId the unique identifier of the spatial level (required)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getIndicatorBySpatialUnitIdAndIdWithoutGeometry",
        summary = "retrieve the indicator values and other properties for the selected spatial unit. It does not include the spatial geometries!",
        description = "retrieve the indicator values and other properties for the selected spatial unit. It does not include the spatial geometries!",
        tags = { "indicators" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/indicators/{indicatorId}/{spatialUnitId}/without-geometry",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Map<String, String>>> getIndicatorBySpatialUnitIdAndIdWithoutGeometry(
        @Parameter(name = "indicatorId", description = "unique identifier of the selected indicator dataset", required = true, in = ParameterIn.PATH) @PathVariable("indicatorId") String indicatorId,
        @Parameter(name = "spatialUnitId", description = "the unique identifier of the spatial level", required = true, in = ParameterIn.PATH) @PathVariable("spatialUnitId") String spatialUnitId
    );


    /**
     * GET /indicators/{indicatorId}/permissions : retrieve information about the permissions for the selected indicator dataset
     * retrieve information about the permissions for the selected indicator dataset
     *
     * @param indicatorId unique identifier of the selected indicator dataset (required)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getIndicatorPermissionsById",
        summary = "retrieve information about the permissions for the selected indicator dataset",
        description = "retrieve information about the permissions for the selected indicator dataset",
        tags = { "indicators" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PermissionLevelType.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/indicators/{indicatorId}/permissions",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<PermissionLevelType>> getIndicatorPermissionsById(
        @Parameter(name = "indicatorId", description = "unique identifier of the selected indicator dataset", required = true, in = ParameterIn.PATH) @PathVariable("indicatorId") String indicatorId
    );


    /**
     * GET /indicators/{indicatorId}/{spatialUnitId}/permissions : retrieve information about the permissions for the selected indicator and spatial unit dataset
     * retrieve information about the permissions for the selected indicator and spatial unit dataset
     *
     * @param indicatorId unique identifier of the selected indicator dataset (required)
     * @param spatialUnitId the unique identifier of the spatial level (required)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getIndicatorPermissionsBySpatialUnitIdAndId",
        summary = "retrieve information about the permissions for the selected indicator and spatial unit dataset",
        description = "retrieve information about the permissions for the selected indicator and spatial unit dataset",
        tags = { "indicators" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PermissionLevelType.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/indicators/{indicatorId}/{spatialUnitId}/permissions",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<PermissionLevelType>> getIndicatorPermissionsBySpatialUnitIdAndId(
        @Parameter(name = "indicatorId", description = "unique identifier of the selected indicator dataset", required = true, in = ParameterIn.PATH) @PathVariable("indicatorId") String indicatorId,
        @Parameter(name = "spatialUnitId", description = "the unique identifier of the spatial level", required = true, in = ParameterIn.PATH) @PathVariable("spatialUnitId") String spatialUnitId
    );


    /**
     * GET /indicators : retrieve information about available indicators
     * retrieve information about available indicators
     *
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getIndicators",
        summary = "retrieve information about available indicators",
        description = "retrieve information about available indicators",
        tags = { "indicators" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = IndicatorOverviewType.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/indicators",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<IndicatorOverviewType>> getIndicators(
        
    );


    /**
     * GET /indicators/{indicatorId}/{spatialUnitId}/singleFeature/{featureId} : retrieve single feature database records for all applicable periods of validity for the selected indicator dataset (hence might contain the target feature multiple times if it exists for different periods of validity)
     * retrieve single feature database records for all applicable periods of validity for the selected indicator dataset (hence might contain the target feature multiple times if it exists for different periods of validity)
     *
     * @param indicatorId unique identifier of the selected indicator dataset (required)
     * @param spatialUnitId the unique identifier of the spatial level (required)
     * @param featureId the identifier of the indicator dataset spatial feature (required)
     * @param simplifyGeometries Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from &#39;weak&#39; to &#39;strong&#39;, while &#39;original&#39; will return original feature geometries without any simplification. (optional, default to original)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getSingleIndicatorFeatureById",
        summary = "retrieve single feature database records for all applicable periods of validity for the selected indicator dataset (hence might contain the target feature multiple times if it exists for different periods of validity)",
        description = "retrieve single feature database records for all applicable periods of validity for the selected indicator dataset (hence might contain the target feature multiple times if it exists for different periods of validity)",
        tags = { "indicators" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/indicators/{indicatorId}/{spatialUnitId}/singleFeature/{featureId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Map<String, String>>> getSingleIndicatorFeatureById(
        @Parameter(name = "indicatorId", description = "unique identifier of the selected indicator dataset", required = true, in = ParameterIn.PATH) @PathVariable("indicatorId") String indicatorId,
        @Parameter(name = "spatialUnitId", description = "the unique identifier of the spatial level", required = true, in = ParameterIn.PATH) @PathVariable("spatialUnitId") String spatialUnitId,
        @Parameter(name = "featureId", description = "the identifier of the indicator dataset spatial feature", required = true, in = ParameterIn.PATH) @PathVariable("featureId") String featureId,
        @Parameter(name = "simplifyGeometries", description = "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "simplifyGeometries", required = false, defaultValue = "original") String simplifyGeometries
    );


    /**
     * GET /indicators/{indicatorId}/{spatialUnitId}/singleFeature/{featureId}/singleFeatureRecord/{featureRecordId} : retrieve single feature database record specified by its unique database primary key id test
     * retrieve single feature database record specified by its unique database primary key id test
     *
     * @param indicatorId unique identifier of the selected indicator dataset (required)
     * @param featureId the identifier of the indicator dataset spatial feature (required)
     * @param featureRecordId the unique database record identifier of the indicator dataset feature - multiple records may exist for the same real world object if they apply to different periods of validity (required)
     * @param spatialUnitId the unique identifier of the spatial level (required)
     * @param simplifyGeometries Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from &#39;weak&#39; to &#39;strong&#39;, while &#39;original&#39; will return original feature geometries without any simplification. (optional, default to original)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getSingleIndicatorFeatureRecordById",
        summary = "retrieve single feature database record specified by its unique database primary key id test",
        description = "retrieve single feature database record specified by its unique database primary key id test",
        tags = { "indicators" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/indicators/{indicatorId}/{spatialUnitId}/singleFeature/{featureId}/singleFeatureRecord/{featureRecordId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Map<String, String>>> getSingleIndicatorFeatureRecordById(
        @Parameter(name = "indicatorId", description = "unique identifier of the selected indicator dataset", required = true, in = ParameterIn.PATH) @PathVariable("indicatorId") String indicatorId,
        @Parameter(name = "featureId", description = "the identifier of the indicator dataset spatial feature", required = true, in = ParameterIn.PATH) @PathVariable("featureId") String featureId,
        @Parameter(name = "featureRecordId", description = "the unique database record identifier of the indicator dataset feature - multiple records may exist for the same real world object if they apply to different periods of validity", required = true, in = ParameterIn.PATH) @PathVariable("featureRecordId") String featureRecordId,
        @Parameter(name = "spatialUnitId", description = "the unique identifier of the spatial level", required = true, in = ParameterIn.PATH) @PathVariable("spatialUnitId") String spatialUnitId,
        @Parameter(name = "simplifyGeometries", description = "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "simplifyGeometries", required = false, defaultValue = "original") String simplifyGeometries
    );


    /**
     * PUT /indicators/{indicatorId} : Modify/Update the contents of the selected indicator dataset
     * Modify/Update the contents of the selected indicator dataset
     *
     * @param indicatorId unique identifier of the selected indicator dataset (required)
     * @param indicatorData indicator data (required)
     * @return OK - Updated (status code 200)
     *         or Created (status code 201)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "updateIndicatorAsBody",
        summary = "Modify/Update the contents of the selected indicator dataset",
        description = "Modify/Update the contents of the selected indicator dataset",
        tags = { "indicators" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK - Updated"),
            @ApiResponse(responseCode = "201", description = "Created"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found"),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/indicators/{indicatorId}",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> updateIndicatorAsBody(
        @Parameter(name = "indicatorId", description = "unique identifier of the selected indicator dataset", required = true, in = ParameterIn.PATH) @PathVariable("indicatorId") String indicatorId,
        @Parameter(name = "indicatorData", description = "indicator data", required = true) @Valid @RequestBody IndicatorPUTInputType indicatorData
    );


    /**
     * PATCH /indicators/display-order : Update displayOrder for submitted indicators
     * Update displayOrder for submitted indicators
     *
     * @param indicatorOrderArray array of indicator id and displayOrder items (required)
     * @return OK (status code 200)
     *         or Created (status code 201)
     *         or No Content (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "updateIndicatorDisplayOrder",
        summary = "Update displayOrder for submitted indicators",
        description = "Update displayOrder for submitted indicators",
        tags = { "indicators" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "201", description = "Created"),
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found"),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/indicators/display-order",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> updateIndicatorDisplayOrder(
        @Parameter(name = "indicatorOrderArray", description = "array of indicator id and displayOrder items", required = true) @Valid @RequestBody List<IndicatorPATCHDisplayOrderInputType> indicatorOrderArray
    );


    /**
     * PUT /indicators/{indicatorId}/{spatialUnitId}/singleFeature/{featureId}/singleFeatureRecord/{featureRecordId} : Modify/Update the feature record of the selected indicator dataset feature
     * Modify/Update the feature record of the selected indicator dataset feature
     *
     * @param indicatorId unique identifier of the selected indicator dataset (required)
     * @param spatialUnitId the unique identifier of the spatial level (required)
     * @param featureId the identifier of the indicator dataset feature (required)
     * @param featureRecordId the unique database record identifier of the indicator dataset feature - multiple records may exist for the same real world object if they apply to different periods of validity (required)
     * @param indicatorFeatureRecordData indicator feature record data (required)
     * @return OK - Updated (status code 200)
     *         or Created (status code 201)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "updateIndicatorFeatureRecordAsBody",
        summary = "Modify/Update the feature record of the selected indicator dataset feature",
        description = "Modify/Update the feature record of the selected indicator dataset feature",
        tags = { "indicators" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK - Updated"),
            @ApiResponse(responseCode = "201", description = "Created"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found"),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/indicators/{indicatorId}/{spatialUnitId}/singleFeature/{featureId}/singleFeatureRecord/{featureRecordId}",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> updateIndicatorFeatureRecordAsBody(
        @Parameter(name = "indicatorId", description = "unique identifier of the selected indicator dataset", required = true, in = ParameterIn.PATH) @PathVariable("indicatorId") String indicatorId,
        @Parameter(name = "spatialUnitId", description = "the unique identifier of the spatial level", required = true, in = ParameterIn.PATH) @PathVariable("spatialUnitId") String spatialUnitId,
        @Parameter(name = "featureId", description = "the identifier of the indicator dataset feature", required = true, in = ParameterIn.PATH) @PathVariable("featureId") String featureId,
        @Parameter(name = "featureRecordId", description = "the unique database record identifier of the indicator dataset feature - multiple records may exist for the same real world object if they apply to different periods of validity", required = true, in = ParameterIn.PATH) @PathVariable("featureRecordId") String featureRecordId,
        @Parameter(name = "indicatorFeatureRecordData", description = "indicator feature record data", required = true) @Valid @RequestBody List<Map<String, String>> indicatorFeatureRecordData
    );


    /**
     * PATCH /indicators/{indicatorId} : Modify/Update the metadata of the selected indicator dataset
     * Modify/Update the metadata of the selected indicator dataset. This replaces the formerly stored metadata.
     *
     * @param indicatorId unique identifier of the selected indicator dataset (required)
     * @param metadata metadata input (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "updateIndicatorMetadataAsBody",
        summary = "Modify/Update the metadata of the selected indicator dataset",
        description = "Modify/Update the metadata of the selected indicator dataset. This replaces the formerly stored metadata.",
        tags = { "indicators" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/indicators/{indicatorId}",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> updateIndicatorMetadataAsBody(
        @Parameter(name = "indicatorId", description = "unique identifier of the selected indicator dataset", required = true, in = ParameterIn.PATH) @PathVariable("indicatorId") String indicatorId,
        @Parameter(name = "metadata", description = "metadata input", required = true) @Valid @RequestBody IndicatorMetadataPATCHInputType metadata
    );


    /**
     * PATCH /indicators/{indicatorId}/{spatialUnitId} : Modify/Update the selected indicator dataset
     *
     * @param indicatorId unique identifier of the selected indicator dataset (required)
     * @param spatialUnitId the unique identifier of the spatial level (required)
     * @param indicatorData Indicator parameters input (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "updateIndicatorRoles",
        summary = "Modify/Update the selected indicator dataset",
        tags = { "indicators" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/indicators/{indicatorId}/{spatialUnitId}",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> updateIndicatorRoles(
        @Parameter(name = "indicatorId", description = "unique identifier of the selected indicator dataset", required = true, in = ParameterIn.PATH) @PathVariable("indicatorId") String indicatorId,
        @Parameter(name = "spatialUnitId", description = "the unique identifier of the spatial level", required = true, in = ParameterIn.PATH) @PathVariable("spatialUnitId") String spatialUnitId,
        @Parameter(name = "indicatorData", description = "Indicator parameters input", required = true) @Valid @RequestBody IndicatorPATCHInputType indicatorData
    );

}
