/**
 * NOTE: This class is auto generated by the swagger code generator program (unset).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package de.hsbo.kommonitor.datamanagement.api;

import java.math.BigDecimal;
import de.hsbo.kommonitor.datamanagement.model.IndicatorOverviewType;
import de.hsbo.kommonitor.datamanagement.model.IndicatorPATCHInputType;
import de.hsbo.kommonitor.datamanagement.model.IndicatorPOSTInputType;
import de.hsbo.kommonitor.datamanagement.model.IndicatorPUTInputType;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
@javax.annotation.Generated(value = "de.prospectiveharvest.codegen.PHServerGenerator", date = "2018-05-17T10:54:51.077+02:00")

@Api(value = "Indicators", description = "the Indicators API")
public interface IndicatorsApi {

    @ApiOperation(value = "Add a new indicator dataset", nickname = "addIndicatorAsBody", notes = "Add/Register an indicator dataset for a certain period of time and spatial unit/level", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/indicators",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity addIndicatorAsBody(@ApiParam(value = "indicator data" ,required=true )   @RequestBody IndicatorPOSTInputType indicatorData);


    @ApiOperation(value = "Delete the features/contents of the selected indicator dataset", nickname = "deleteIndicatorById", notes = "Delete the features/contents of the selected indicator dataset", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "API key is missing or invalid") })
    @RequestMapping(value = "/indicators/{indicatorId}",
        method = RequestMethod.DELETE)
    ResponseEntity deleteIndicatorById(@ApiParam(value = "unique identifier of the selected indicator dataset",required=true) @PathVariable("indicatorId") String indicatorId);


    @ApiOperation(value = "Delete the features/contents of the selected indicator dataset, selected by year and month", nickname = "deleteIndicatorByIdAndYearAndMonth", notes = "Delete the features/contents of the selected indicator dataset, selected by year and month", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "API key is missing or invalid") })
    @RequestMapping(value = "/indicators/{indicatorId}/{spatialUnitLevel}/{year}/{month}/{day}",
        method = RequestMethod.DELETE)
    ResponseEntity deleteIndicatorByIdAndYearAndMonth(@ApiParam(value = "unique identifier of the selected indicator dataset",required=true) @PathVariable("indicatorId") String indicatorId,@ApiParam(value = "the identifier of the spatial level",required=true) @PathVariable("spatialUnitLevel") String spatialUnitLevel,@ApiParam(value = "year for which the indicator shall be queried",required=true) @PathVariable("year") BigDecimal year,@ApiParam(value = "month for which the indicator shall be queried",required=true) @PathVariable("month") BigDecimal month,@ApiParam(value = "day for which datasets shall be queried",required=true) @PathVariable("day") BigDecimal day);


    @ApiOperation(value = "retrieve the indicator for the selected spatial unit as GeoJSON", nickname = "getIndicatorBySpatialUnitLevelAndId", notes = "retrieve the indicator for the selected spatial unit as GeoJSON", response = byte[].class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = byte[].class),
        @ApiResponse(code = 400, message = "Invalid status value"),
        @ApiResponse(code = 401, message = "API key is missing or invalid") })
    @RequestMapping(value = "/indicators/{indicatorId}/{spatialUnitLevel}",
        produces = { "application/octed-stream" }, 
        method = RequestMethod.GET)
    ResponseEntity<byte[]> getIndicatorBySpatialUnitLevelAndId(@ApiParam(value = "unique identifier of the selected indicator dataset",required=true) @PathVariable("indicatorId") String indicatorId,@ApiParam(value = "the identifier of the spatial level",required=true) @PathVariable("spatialUnitLevel") String spatialUnitLevel);


    @ApiOperation(value = "retrieve the indicator for the selected spatial unit, year and month as GeoJSON", nickname = "getIndicatorBySpatialUnitLevelAndIdAndYearAndMonth", notes = "retrieve the indicator for the selected spatial unit, year and month as GeoJSON", response = byte[].class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = byte[].class),
        @ApiResponse(code = 400, message = "Invalid status value"),
        @ApiResponse(code = 401, message = "API key is missing or invalid") })
    @RequestMapping(value = "/indicators/{indicatorId}/{spatialUnitLevel}/{year}/{month}/{day}",
        produces = { "application/octed-stream" }, 
        method = RequestMethod.GET)
    ResponseEntity<byte[]> getIndicatorBySpatialUnitLevelAndIdAndYearAndMonth(@ApiParam(value = "unique identifier of the selected indicator dataset",required=true) @PathVariable("indicatorId") String indicatorId,@ApiParam(value = "the identifier of the spatial level",required=true) @PathVariable("spatialUnitLevel") String spatialUnitLevel,@ApiParam(value = "year for which the indicator shall be queried",required=true) @PathVariable("year") BigDecimal year,@ApiParam(value = "month for which the indicator shall be queried",required=true) @PathVariable("month") BigDecimal month,@ApiParam(value = "day for which datasets shall be queried",required=true) @PathVariable("day") BigDecimal day);


    @ApiOperation(value = "retrieve information about available indicators", nickname = "getIndicators", notes = "retrieve information about available indicators", response = IndicatorOverviewType.class, responseContainer = "array", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IndicatorOverviewType.class, responseContainer = "array"),
        @ApiResponse(code = 400, message = "Invalid status value"),
        @ApiResponse(code = 401, message = "API key is missing or invalid") })
    @RequestMapping(value = "/indicators",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<IndicatorOverviewType>> getIndicators(@ApiParam(value = "thematic topic to filter available indicators", allowableValues = "demography, environment, habitation, migration, social")  @RequestParam(value = "topic", required = false) String topic);


    @ApiOperation(value = "retrieve information about the selected indicator", nickname = "getIndicatorsById", notes = "retrieve information about the selected indicator", response = IndicatorOverviewType.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IndicatorOverviewType.class),
        @ApiResponse(code = 400, message = "Invalid status value"),
        @ApiResponse(code = 401, message = "API key is missing or invalid") })
    @RequestMapping(value = "/indicators/{indicatorId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<IndicatorOverviewType> getIndicatorsById(@ApiParam(value = "unique identifier of the selected indicator dataset",required=true) @PathVariable("indicatorId") String indicatorId);


    @ApiOperation(value = "Modify/Update the contents of the selected indicator dataset", nickname = "updateIndicatorAsBody", notes = "Modify/Update the contents of the selected indicator dataset", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK - Updated"),
        @ApiResponse(code = 401, message = "API key is missing or invalid"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/indicators/{indicatorId}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity updateIndicatorAsBody(@ApiParam(value = "unique identifier of the selected indicator dataset",required=true) @PathVariable("indicatorId") String indicatorId,@ApiParam(value = "indicator data" ,required=true )   @RequestBody IndicatorPUTInputType indicatorData);


    @ApiOperation(value = "Modify/Update the metadata of the selected indicator dataset", nickname = "updateIndicatorMetadataAsBody", notes = "Modify/Update the metadata of the selected indicator dataset. This replaces the formerly stored metadata.", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "API key is missing or invalid"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/indicators/{indicatorId}",
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity updateIndicatorMetadataAsBody(@ApiParam(value = "unique identifier of the selected indicator dataset",required=true) @PathVariable("indicatorId") String indicatorId,@ApiParam(value = "metadata input" ,required=true )   @RequestBody IndicatorPATCHInputType metadata);

}
