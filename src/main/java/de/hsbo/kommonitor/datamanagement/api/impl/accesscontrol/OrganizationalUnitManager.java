package de.hsbo.kommonitor.datamanagement.api.impl.accesscontrol;

import de.hsbo.kommonitor.datamanagement.api.impl.exception.ApiException;
import de.hsbo.kommonitor.datamanagement.api.impl.exception.KeycloakException;
import de.hsbo.kommonitor.datamanagement.api.impl.exception.ResourceNotFoundException;
import de.hsbo.kommonitor.datamanagement.auth.KeycloakAdminService;
import de.hsbo.kommonitor.datamanagement.auth.provider.AuthInfoProvider;
import de.hsbo.kommonitor.datamanagement.model.*;
import jakarta.transaction.Transactional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@Transactional
@Repository
@Component
public class OrganizationalUnitManager {

    private static final Logger logger = LoggerFactory.getLogger(OrganizationalUnitManager.class);

    @Autowired
    OrganizationalUnitRepository organizationalUnitRepository;

    @Autowired
    PermissionManager permissionManager;

    @Autowired
    KeycloakAdminService keycloakAdminService;

    @Value("${kommonitor.access-control.anonymous-users.organizationalUnit:public}")
    private String defaultAnonymousOUname;

    @Value("${kommonitor.access-control.authenticated-users.organizationalUnit:kommonitor}")
    private String defaultAuthenticatedOUname;

    public OrganizationalUnitOverviewType addOrganizationalUnit(
            OrganizationalUnitInputType inputOrganizationalUnit,
            AuthInfoProvider provider
    ) throws Exception {
        String name = inputOrganizationalUnit.getName();
        logger.info("Trying to persist OrganizationalUnit with name '{}'", name);

        if (organizationalUnitRepository.existsByName(name)) {
            logger.error(
                    "The OrganizationalUnit with name '{}' already exists. Thus aborting add OrganizationalUnit request.",
                    name);
            throw new Exception("OrganizationalUnit already exists. Aborting addOrganizationalUnit request.");
        }

        /*
         * ID will be autogenerated by JPA / Hibernate
         */
        OrganizationalUnitEntity jpaUnit = new OrganizationalUnitEntity();
        jpaUnit.setName(name);
        jpaUnit.setContact(inputOrganizationalUnit.getContact());
        jpaUnit.setDescription(inputOrganizationalUnit.getDescription());
        jpaUnit.setMandant(inputOrganizationalUnit.getMandant());

        String keycloakId;
        OrganizationalUnitEntity parent = null;

        if (inputOrganizationalUnit.getParentId() != null && !inputOrganizationalUnit.getParentId().isEmpty()) {
            parent = organizationalUnitRepository.findByOrganizationalUnitId(inputOrganizationalUnit.getParentId());
            if (parent == null) {
                logger.error(
                        "parent with given id {} does not exist.",
                        inputOrganizationalUnit.getParentId());
                throw new Exception("parent with given id does not exist");
            }
            if (!provider.checkOrganizationalUnitCreationPermissions(parent)) {
                throw new ApiException(405, "The OrganizationalUnit can not be created due to insufficient permissions.");
            }
            jpaUnit.setParent(parent);
            keycloakId = keycloakAdminService.addSubGroup(inputOrganizationalUnit, parent);

        } else {
            if (!provider.checkOrganizationalUnitCreationPermissions(null)) {
                throw new ApiException(405, "The OrganizationalUnit can not be created due to insufficient permissions.");
            }
            keycloakId = keycloakAdminService.addGroup(inputOrganizationalUnit);
        }
        inputOrganizationalUnit.setKeycloakId(keycloakId);
        keycloakAdminService.createRolesForGroup(inputOrganizationalUnit);
        keycloakAdminService.createRolePolicies(inputOrganizationalUnit, parent);

        jpaUnit.setKeycloakId(UUID.fromString(keycloakId));
        OrganizationalUnitEntity saved = organizationalUnitRepository.saveAndFlush(jpaUnit);

        // Generate appropriate roles
        List<PermissionEntity> roles = new ArrayList<>();
        for (PermissionLevelType level : PermissionLevelType.values()) {
            roles.add(permissionManager.addPermission(saved, level, PermissionResourceType.RESOURCES));
        }
        roles.add(permissionManager.addPermission(saved, PermissionLevelType.CREATOR, PermissionResourceType.USERS));
        roles.add(permissionManager.addPermission(saved, PermissionLevelType.CREATOR, PermissionResourceType.THEMES));
        saved.setPermissions(roles);

        return AccessControlMapper.mapToSwaggerOrganizationalUnit(saved);
    }

    public boolean deleteOrganizationalUnitAndRolesById(String organizationalUnitId) throws ApiException {
        OrganizationalUnitEntity unit = organizationalUnitRepository.findByOrganizationalUnitId(organizationalUnitId);
        if (unit != null) {
            // Prevent deletion of default units.
            if (unit.getName().equals(defaultAnonymousOUname) || unit.getName().equals(defaultAuthenticatedOUname)) {
                logger.error("Trying to delete default OrganizationalUnits.");
                throw new ApiException(HttpStatus.FORBIDDEN.value(),
                        "Tried to delete default OrganizationalUnits");
            }

            // This should automatically propagate to associated roles via @CascadeType.REMOVE
            organizationalUnitRepository.deleteByOrganizationalUnitId(organizationalUnitId);
            return true;
        } else {
            logger.error("No OrganizationalUnit with id '{}' was found in database. Delete request has no effect.",
                    organizationalUnitId);
            throw new ResourceNotFoundException(HttpStatus.NOT_FOUND.value(),
                    "Tried to delete OrganizationalUnit, but no OrganizationalUnit " +
                            "existes with id " +
                            organizationalUnitId);
        }
    }

    public OrganizationalUnitOverviewType getOrganizationalUnitById(String organizationalUnitId) throws ResourceNotFoundException {
        logger.info("Retrieving OrganizationalUnit for organizationalUnitId '{}'", organizationalUnitId);

        OrganizationalUnitEntity organizationalUnitEntity =
                organizationalUnitRepository.findByOrganizationalUnitId(organizationalUnitId);
        if (organizationalUnitEntity != null) {
            return AccessControlMapper.mapToSwaggerOrganizationalUnit(organizationalUnitEntity);
        } else {
            logger.error("No OrganizationalUnit with id '{}' was found in database. Delete request has no effect.",
                    organizationalUnitId);
            throw new ResourceNotFoundException(HttpStatus.NOT_FOUND.value(),
                    "Tried to delete OrganizationalUnit, but no OrganizationalUnit " +
                            "existes with id " +
                            organizationalUnitId);
        }
    }

    public OrganizationalUnitPermissionOverviewType getOrganizationalUnitPermissionsById(String organizationalUnitId) throws ResourceNotFoundException {
        logger.info("Retrieving OrganizationalUnit->permissions for organizationalUnitId '{}'", organizationalUnitId);

        OrganizationalUnitEntity organizationalUnitEntity =
                organizationalUnitRepository.findByOrganizationalUnitId(organizationalUnitId);

        if (organizationalUnitEntity != null) {
            return AccessControlMapper.mapToSwapperOUPermissionOverviewType(organizationalUnitEntity);
        } else {
            logger.error("No OrganizationalUnit with id '{}' was found in database. Delete request has no effect.",
                    organizationalUnitId);
            throw new ResourceNotFoundException(HttpStatus.NOT_FOUND.value(),
                    "Tried to delete OrganizationalUnit, but no OrganizationalUnit " +
                            "existes with id " +
                            organizationalUnitId);
        }
    }

    public List<OrganizationalUnitOverviewType> getOrganizationalUnits() {
        logger.info("Retrieving all organizationalUnits from db");

        List<OrganizationalUnitEntity> OrganizationalUnitEntities = organizationalUnitRepository.findAll();
        List<OrganizationalUnitOverviewType> organizationalUnits =
                AccessControlMapper.mapToSwaggerOrganizationalUnits(OrganizationalUnitEntities);

        return organizationalUnits;
    }

    public String updateOrganizationalUnit(OrganizationalUnitInputType newData,
                                           String organizationalUnitId) throws Exception {
        logger.info("Trying to update OrganizationalUnit with organizationalUnitId '{}'", organizationalUnitId);
        if (organizationalUnitRepository.existsByOrganizationalUnitId(organizationalUnitId)) {
            OrganizationalUnitEntity organizationalUnitEntity =
                    organizationalUnitRepository.findByOrganizationalUnitId(organizationalUnitId);

            organizationalUnitEntity.setName(newData.getName());
            organizationalUnitEntity.setContact(newData.getContact());
            organizationalUnitEntity.setDescription(newData.getDescription());
            organizationalUnitEntity.setKeycloakId(UUID.fromString(newData.getKeycloakId()));
            organizationalUnitEntity.setMandant(newData.getMandant());

            if (organizationalUnitEntity.getParent() != null) {

                if (newData.getParentId() == null) {
                    // child group becomes a root group
                    organizationalUnitEntity.setParent(null);

                } else {
                    // child group gets a new parent group
                    OrganizationalUnitEntity parent =
                            organizationalUnitRepository.findByOrganizationalUnitId(newData.getParentId());
                    if (parent == null) {
                        logger.error(
                                "parent with given id {} does not exist.",
                                newData.getParentId());
                        throw new Exception("parent with given id does not exist");
                    }
                    organizationalUnitEntity.setParent(parent);
                }
            }
            //TODO check if we want to allow moving a root group to a child group
            organizationalUnitRepository.saveAndFlush(organizationalUnitEntity);
            return organizationalUnitEntity.getOrganizationalUnitId();
        } else {
            logger.error("No OrganizationalUnit with id '{}' was found in database. Update request has no effect.",
                    organizationalUnitId);
            throw new ResourceNotFoundException(HttpStatus.NOT_FOUND.value(),
                    "Tried to update OrganizationalUnit, but no OrganizationalUnit " +
                            "exists with id " + organizationalUnitId);
        }
    }

}
