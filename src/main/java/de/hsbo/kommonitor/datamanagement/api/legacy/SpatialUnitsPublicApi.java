/**
 * NOTE: This class is auto generated by the swagger code generator program (unset).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package de.hsbo.kommonitor.datamanagement.api.legacy;

import de.hsbo.kommonitor.datamanagement.model.legacy.spatialunits.SpatialUnitOverviewType;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import java.math.BigDecimal;
import java.util.List;

@Api(value = "SpatialUnits", description = "the public SpatialUnits API")
public interface SpatialUnitsPublicApi {

    @ApiOperation(value = "retrieve all feature entries for all applicable periods of validity for the selected spatial unit/level (hence might contain each feature multiple times if they exist for different periods of validity)",
            nickname = "getAllSpatialUnitFeaturesById",
            notes = "retrieve all feature entries for all applicable periods of validity for the selected spatial unit/level (hence might contain each feature multiple times if they exist for different periods of validity)",
            response = String.class,
            authorizations = {
                    @Authorization(value = "basicAuth")
            }, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = String.class),
            @ApiResponse(code = 400, message = "Invalid status value"),
            @ApiResponse(code = 401, message = "API key is missing or invalid")})
    @RequestMapping(value = "/spatial-units/{spatialUnitId}/allFeatures",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<byte[]> getAllPublicSpatialUnitFeaturesById(@ApiParam(value = "the unique identifier of the spatial level", required = true) @PathVariable("spatialUnitId") String spatialUnitId,
                                                               @ApiParam(value = "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification.", allowableValues = "original, weak, medium, strong", defaultValue = "original") @RequestParam(value = "simplifyGeometries", required = false, defaultValue = "original") String simplifyGeometries);


    @ApiOperation(value = "retrieve information about available features of different spatial units/levels",
            nickname = "getSpatialUnits",
            notes = "retrieve information about available features of different spatial units/levels",
            response = SpatialUnitOverviewType.class,
            responseContainer = "array",
            authorizations = {
                    @Authorization(value = "basicAuth")
            }, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = SpatialUnitOverviewType.class, responseContainer = "array"),
            @ApiResponse(code = 400, message = "Invalid status value"),
            @ApiResponse(code = 401, message = "API key is missing or invalid")})
    @RequestMapping(value = "/spatial-units",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<SpatialUnitOverviewType>> getPublicSpatialUnits();


    @ApiOperation(value = "retrieve information about available features of the selected spatial unit/level",
            nickname = "getSpatialUnitsById", notes = "retrieve information about available features of the selected spatial unit/level",
            response = SpatialUnitOverviewType.class,
            authorizations = {
                    @Authorization(value = "basicAuth")
            }, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = SpatialUnitOverviewType.class),
            @ApiResponse(code = 400, message = "Invalid status value"),
            @ApiResponse(code = 401, message = "API key is missing or invalid")})
    @RequestMapping(value = "/spatial-units/{spatialUnitId}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<SpatialUnitOverviewType> getPublicSpatialUnitsById(@ApiParam(value = "the unique identifier of the spatial level", required = true) @PathVariable("spatialUnitId") String spatialUnitId);


    @ApiOperation(value = "retrieve the features according to the selected spatial unit/level and selected year and month as GeoJSON",
            nickname = "getSpatialUnitsByIdAndYearAndMonth",
            notes = "retrieve the features according to the selected spatial unit/level and selected year and month as GeoJSON",
            response = byte[].class,
            authorizations = {
                    @Authorization(value = "basicAuth")
            }, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = byte[].class),
            @ApiResponse(code = 400, message = "Invalid status value"),
            @ApiResponse(code = 401, message = "API key is missing or invalid")})
    @RequestMapping(value = "/spatial-units/{spatialUnitId}/{year}/{month}/{day}",
            produces = {"application/octed-stream"},
            method = RequestMethod.GET)
    ResponseEntity<byte[]> getPublicSpatialUnitsByIdAndYearAndMonth(@ApiParam(value = "the unique identifier of the spatial level", required = true) @PathVariable("spatialUnitId") String spatialUnitId,
                                                                    @ApiParam(value = "year for which datasets shall be queried", required = true) @PathVariable("year") BigDecimal year,
                                                                    @ApiParam(value = "month for which datasets shall be queried", required = true) @PathVariable("month") BigDecimal month,
                                                                    @ApiParam(value = "day for which datasets shall be queried", required = true) @PathVariable("day") BigDecimal day,
                                                                    @ApiParam(value = "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification.", allowableValues = "original, weak, medium, strong", defaultValue = "original") @RequestParam(value = "simplifyGeometries", required = false, defaultValue = "original") String simplifyGeometries);


    @ApiOperation(value = "retrieve the JSON schema for the selected spatial unit/level",
            nickname = "getSpatialUnitsSchemaById", notes = "retrieve the JSON schema for the selected spatial unit/level. The JSON schema indicates the property structure of the dataset.",
            response = String.class,
            authorizations = {
                    @Authorization(value = "basicAuth")
            }, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = String.class),
            @ApiResponse(code = 400, message = "Invalid status value"),
            @ApiResponse(code = 401, message = "API key is missing or invalid")})
    @RequestMapping(value = "/spatial-units/{spatialUnitId}/schema",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<String> getPublicSpatialUnitsSchemaById(@ApiParam(value = "the unique identifier of the spatial level", required = true) @PathVariable("spatialUnitId") String spatialUnitId);

	@ApiOperation(value = "retrieve single feature database records for all applicable periods of validity for the selected spatial-unit dataset (hence might contain the target feature multiple times if it exists for different periods of validity)", nickname = "getPublicSingleSpatialUnitFeatureById", notes = "retrieve single feature database records for all applicable periods of validity for the selected spatial-unit dataset (hence might contain the target feature multiple times if it exists for different periods of validity)", response = String.class, authorizations = {
			@Authorization(value = "kommonitor-data-access_oauth", scopes = {

			}) }, tags = { "spatial-units-public-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = String.class),
			@ApiResponse(code = 400, message = "Invalid status value"),
			@ApiResponse(code = 401, message = "API key is missing or invalid"),
			@ApiResponse(code = 403, message = "Forbidden"), @ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/spatial-units/{spatialUnitId}/singleFeature/{featureId}", produces = {
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<byte[]> getPublicSingleSpatialUnitFeatureById(
			@ApiParam(value = "the identifier of the spatial-unit dataset", required = true) @PathVariable("spatialUnitId") String spatialUnitId,
			@ApiParam(value = "the identifier of the spatial-unit dataset feature", required = true) @PathVariable("featureId") String featureId,
			@ApiParam(value = "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification.", allowableValues = "original, weak, medium, strong", defaultValue = "original") @RequestParam(value = "simplifyGeometries", required = false, defaultValue = "original") String simplifyGeometries);

	@ApiOperation(value = "retrieve single feature database record specified by its unique database primary key id", nickname = "getPublicSingleSpatialUnitFeatureRecordById", notes = "retrieve single feature database record specified by its unique database primary key id", response = String.class, authorizations = {
			@Authorization(value = "kommonitor-data-access_oauth", scopes = {

			}) }, tags = { "spatial-units-public-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = String.class),
			@ApiResponse(code = 400, message = "Invalid status value"),
			@ApiResponse(code = 401, message = "API key is missing or invalid"),
			@ApiResponse(code = 403, message = "Forbidden"), @ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/spatial-units/{spatialUnitId}/singleFeature/{featureId}/singleFeatureRecord/{featureRecordId}", produces = {
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<byte[]> getPublicSingleSpatialUnitFeatureRecordById(
			@ApiParam(value = "the identifier of the spatial-unit dataset", required = true) @PathVariable("spatialUnitId") String spatialUnitId,
			@ApiParam(value = "the identifier of the spatial-unit dataset feature", required = true) @PathVariable("featureId") String featureId,
			@ApiParam(value = "the unique database record identifier of the spatial-unit dataset feature - multiple records may exist for the same real world object if they apply to different periods of validity", required = true) @PathVariable("featureRecordId") String featureRecordId,
			@ApiParam(value = "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification.", allowableValues = "original, weak, medium, strong", defaultValue = "original") @RequestParam(value = "simplifyGeometries", required = false, defaultValue = "original") String simplifyGeometries);
    
}
