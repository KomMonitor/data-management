package de.hsbo.kommonitor.datamanagement.api.impl.users;

import java.util.List;

import javax.transaction.Transactional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
//import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Repository;

import de.hsbo.kommonitor.datamanagement.api.impl.exception.ResourceNotFoundException;
import de.hsbo.kommonitor.datamanagement.model.legacy.users.UserInputType;
import de.hsbo.kommonitor.datamanagement.model.legacy.users.UserOverviewType;
import de.hsbo.kommonitor.datamanagement.model.legacy.users.UsersEntity;

@Transactional
@Repository
@Component
public class UsersManager {

	private static Logger logger = LoggerFactory.getLogger(UsersManager.class);

	/**
	*
	*/
	// @PersistenceContext
	// EntityManager em;

	@Autowired
	UsersRepository usersRepo;
	
//	@Autowired
//	private BCryptPasswordEncoder passwordEncoder;

	public String addUser(UserInputType userData) throws Exception {
		String userName = userData.getUserName();
		logger.info("Trying to persist user with userName '{}'", userName);
		/*
		 * analyse input type
		 * 
		 * make instance of TopicOverviewType
		 * 
		 * save TopicOverviewType instance to db
		 * 
		 * return id
		 */

		if (usersRepo.existsByUserName(userName)) {
			logger.error("The user with userName '{}' already exists. Thus aborting add user request.", userName);
			throw new Exception("user already exists. Aborting add user request.");
		}

		UsersEntity user = new UsersEntity();
		user.setUserName(userName);
		/*
		 * save password as encrypted String
		 */
//		user.setPassword(passwordEncoder.encode(userData.getPassword()));

		/*
		 * ID will be autogenerated from JPA / Hibernate
		 */

		usersRepo.saveAndFlush(user);

		return user.getUserId();

	}

	public boolean deleteUserById(String userId) throws ResourceNotFoundException {
		logger.info("Trying to delete user with userId '{}'", userId);
		if (usersRepo.existsByUserId(userId)) {
			usersRepo.deleteByUserId(userId);
			return true;
		} else {
			logger.error("No user with id '{}' was found in database. Delete request has no effect.", userId);
			throw new ResourceNotFoundException(HttpStatus.NOT_FOUND.value(),
					"Tried to delete user, but no user existes with id " + userId);
		}
	}

	public UserOverviewType getUserById(String userId) {
		logger.info("Retrieving user for userId '{}'", userId);

		UsersEntity userEntity = usersRepo.findByUserId(userId);
		UserOverviewType user = UsersMapper.mapToSwaggerUser(userEntity);

		return user;
	}

	public List<UserOverviewType> getUsers() {
		logger.info("Retrieving all users from db");

		List<UsersEntity> userEntities = usersRepo.findAll();
		List<UserOverviewType> users = UsersMapper.mapToSwaggerUsers(userEntities);

		return users;
	}

	public String updateUser(UserInputType userData, String userId) throws ResourceNotFoundException {
		logger.info("Trying to update user with userId '{}'", userId);
		if (usersRepo.existsByUserId(userId)) {
			UsersEntity userEntity = usersRepo.findByUserId(userId);
			userEntity.setUserName(userData.getUserName());
			/*
			 * save password as encrypted String
			 */
//			userEntity.setPassword(passwordEncoder.encode(userData.getPassword()));
			usersRepo.saveAndFlush(userEntity);
			return userId;
		} else {
			logger.error("No user with id '{}' was found in database. Update request has no effect.", userId);
			throw new ResourceNotFoundException(HttpStatus.NOT_FOUND.value(),
					"Tried to update user, but no user existes with id " + userId);
		}
	}

}
