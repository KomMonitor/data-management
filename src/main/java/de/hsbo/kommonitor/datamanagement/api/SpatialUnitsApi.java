/**
 * NOTE: This class is auto generated by the swagger code generator program (unset).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package de.hsbo.kommonitor.datamanagement.api;

import java.math.BigDecimal;
import java.security.Principal;
import java.util.List;

import de.hsbo.kommonitor.datamanagement.model.roles.PermissionLevelType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import de.hsbo.kommonitor.datamanagement.model.spatialunits.SpatialUnitOverviewType;
import de.hsbo.kommonitor.datamanagement.model.spatialunits.SpatialUnitPATCHInputType;
import de.hsbo.kommonitor.datamanagement.model.spatialunits.SpatialUnitPOSTInputType;
import de.hsbo.kommonitor.datamanagement.model.spatialunits.SpatialUnitPUTInputType;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
@javax.annotation.Generated(value = "de.prospectiveharvest.codegen.PHServerGenerator", date = "2019-04-05T10:56:22.201+02:00")

@Api(value = "SpatialUnits", description = "the SpatialUnits API")
public interface SpatialUnitsApi {

    @ApiOperation(value = "Add a new spatial-unit", nickname = "addSpatialUnitAsBody", notes = "Add/Register a spatial unit for a certain period of time", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "API key is missing or invalid"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/spatial-units",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<SpatialUnitOverviewType> addSpatialUnitAsBody(@ApiParam(value = "feature data" ,required=true )   @RequestBody SpatialUnitPOSTInputType featureData);

	@ApiOperation(value = "Delete all features/contents of the selected spatial-unit dataset", nickname = "deleteAllSpatialUnitFeaturesById", notes = "Delete all features/contents of the selected spatial-unit dataset", authorizations = {
			@Authorization(value = "basicAuth") }, tags = {})
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK"),
			@ApiResponse(code = 401, message = "API key is missing or invalid") })
	@RequestMapping(value = "/spatial-units/{spatialUnitId}/allFeatures", method = RequestMethod.DELETE)
	ResponseEntity deleteAllSpatialUnitFeaturesById(
			@ApiParam(value = "the unique identifier of the spatial level", required = true) @PathVariable("spatialUnitId") String spatialUnitId);

    @ApiOperation(value = "Delete the features/contents of the selected spatial-unit", nickname = "deleteSpatialUnitById", notes = "Delete the features/contents of the selected spatial-unit", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "API key is missing or invalid") })
    @RequestMapping(value = "/spatial-units/{spatialUnitId}",
        method = RequestMethod.DELETE)
    ResponseEntity deleteSpatialUnitById(@ApiParam(value = "the unique identifier of the spatial level",required=true) @PathVariable("spatialUnitId") String spatialUnitId);


    @ApiOperation(value = "Delete the features/contents of the selected spatial-unit, year and month", nickname = "deleteSpatialUnitByIdAndYearAndMonth", notes = "Delete the features/contents of the selected spatial-unit, year and month", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "API key is missing or invalid") })
    @RequestMapping(value = "/spatial-units/{spatialUnitId}/{year}/{month}/{day}",
        method = RequestMethod.DELETE)
    ResponseEntity deleteSpatialUnitByIdAndYearAndMonth(@ApiParam(value = "the unique identifier of the spatial level",required=true) @PathVariable("spatialUnitId") String spatialUnitId,@ApiParam(value = "year for which datasets shall be queried",required=true) @PathVariable("year") BigDecimal year,@ApiParam(value = "month for which datasets shall be queried",required=true) @PathVariable("month") BigDecimal month,@ApiParam(value = "day for which datasets shall be queried",required=true) @PathVariable("day") BigDecimal day);

	@ApiOperation(value = "Delete all database records for the specified feature of the selected spatial-unit dataset", nickname = "deleteSingleSpatialUnitFeatureById", notes = "Delete all database records for the specified feature of the selected spatial-unit dataset", response = ResponseEntity.class, authorizations = {
			@Authorization(value = "kommonitor-data-access_oauth", scopes = {

			}) }, tags = { "spatial-units-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = ResponseEntity.class),
			@ApiResponse(code = 204, message = "No Content"),
			@ApiResponse(code = 401, message = "API key is missing or invalid"),
			@ApiResponse(code = 403, message = "Forbidden") })
	@RequestMapping(value = "/spatial-units/{spatialUnitId}/singleFeature/{featureId}", produces = {
			"*/*" }, method = RequestMethod.DELETE)
	ResponseEntity<ResponseEntity> deleteSingleSpatialUnitFeatureById(
			@ApiParam(value = "the identifier of the spatial-unit dataset", required = true) @PathVariable("spatialUnitId") String spatialUnitId,
			@ApiParam(value = "the identifier of the spatial-unit dataset feature", required = true) @PathVariable("featureId") String featureId);

	@ApiOperation(value = "Delete single feature database record specified by its unique database primary key id for the specified feature of the selected spatial-unit dataset", nickname = "deleteSingleSpatialUnitFeatureRecordById", notes = "Delete single feature database record specified by its unique database primary key id for the specified feature of the selected spatial-unit dataset", response = ResponseEntity.class, authorizations = {
			@Authorization(value = "kommonitor-data-access_oauth", scopes = {

			}) }, tags = { "spatial-units-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = ResponseEntity.class),
			@ApiResponse(code = 204, message = "No Content"),
			@ApiResponse(code = 401, message = "API key is missing or invalid"),
			@ApiResponse(code = 403, message = "Forbidden") })
	@RequestMapping(value = "/spatial-units/{spatialUnitId}/singleFeature/{featureId}/singleFeatureRecord/{featureRecordId}", produces = {
			"*/*" }, method = RequestMethod.DELETE)
	ResponseEntity<ResponseEntity> deleteSingleSpatialUnitFeatureRecordById(
			@ApiParam(value = "the identifier of the spatial-unit dataset", required = true) @PathVariable("spatialUnitId") String spatialUnitId,
			@ApiParam(value = "the identifier of the spatial-unit dataset feature", required = true) @PathVariable("featureId") String featureId,
			@ApiParam(value = "the unique database record identifier of the spatial-unit dataset feature - multiple records may exist for the same real world object if they apply to different periods of validity", required = true) @PathVariable("featureRecordId") String featureRecordId);
    
    @ApiOperation(value = "retrieve all feature entries for all applicable periods of validity for the selected spatial unit/level (hence might contain each feature multiple times if they exist for different periods of validity)", nickname = "getAllSpatialUnitFeaturesById", notes = "retrieve all feature entries for all applicable periods of validity for the selected spatial unit/level (hence might contain each feature multiple times if they exist for different periods of validity)", response = String.class, authorizations = {
            @Authorization(value = "basicAuth")
        }, tags={  })
        @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK", response = String.class),
            @ApiResponse(code = 400, message = "Invalid status value"),
            @ApiResponse(code = 401, message = "API key is missing or invalid") })
        @RequestMapping(value = "/spatial-units/{spatialUnitId}/allFeatures",
            produces = { "application/json" }, 
            method = RequestMethod.GET)
        ResponseEntity<byte[]> getAllSpatialUnitFeaturesById(@ApiParam(value = "the unique identifier of the spatial level",required=true) @PathVariable("spatialUnitId") String spatialUnitId,@ApiParam(value = "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification.", allowableValues = "original, weak, medium, strong", defaultValue = "original")  @RequestParam(value = "simplifyGeometries", required = false, defaultValue="original") String simplifyGeometries, Principal principal);

    
    @ApiOperation(value = "retrieve information about available features of different spatial units/levels", nickname = "getSpatialUnits", notes = "retrieve information about available features of different spatial units/levels", response = SpatialUnitOverviewType.class, responseContainer = "array", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SpatialUnitOverviewType.class, responseContainer = "array"),
        @ApiResponse(code = 400, message = "Invalid status value"),
        @ApiResponse(code = 401, message = "API key is missing or invalid") })
    @RequestMapping(value = "/spatial-units",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<SpatialUnitOverviewType>> getSpatialUnits(Principal principal);


    @ApiOperation(value = "retrieve information about available features of the selected spatial unit/level", nickname = "getSpatialUnitsById", notes = "retrieve information about available features of the selected spatial unit/level", response = SpatialUnitOverviewType.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SpatialUnitOverviewType.class),
        @ApiResponse(code = 400, message = "Invalid status value"),
        @ApiResponse(code = 401, message = "API key is missing or invalid") })
    @RequestMapping(value = "/spatial-units/{spatialUnitId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<SpatialUnitOverviewType> getSpatialUnitsById(@ApiParam(value = "the unique identifier of the spatial level",required=true) @PathVariable("spatialUnitId") String spatialUnitId, Principal principal);

    @ApiOperation(value = "retrieve information about the permissions for the selected spatial unit dataset", nickname = "getSpatialUnitsPermissionsById", notes = "retrieve information about the permissions for the selected spatial unit dataset", response = PermissionLevelType.class, responseContainer = "array", authorizations = {
            @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = PermissionLevelType.class, responseContainer = "array"),
            @ApiResponse(code = 400, message = "Invalid status value"),
            @ApiResponse(code = 401, message = "API key is missing or invalid") })
    @RequestMapping(value = "/spatial-units/{spatialUnitId}/permissions",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<List<PermissionLevelType>> getSpatialUnitsPermissionsById(@ApiParam(value = "identifier of the spatial unit dataset",required=true) @PathVariable("spatialUnitId") String spatialUnitId, Principal principal);


    @ApiOperation(value = "retrieve the features according to the selected spatial unit/level and selected year and month as GeoJSON", nickname = "getSpatialUnitsByIdAndYearAndMonth", notes = "retrieve the features according to the selected spatial unit/level and selected year and month as GeoJSON", response = byte[].class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = byte[].class),
        @ApiResponse(code = 400, message = "Invalid status value"),
        @ApiResponse(code = 401, message = "API key is missing or invalid") })
    @RequestMapping(value = "/spatial-units/{spatialUnitId}/{year}/{month}/{day}",
        produces = { "application/octed-stream" }, 
        method = RequestMethod.GET)
    ResponseEntity<byte[]> getSpatialUnitsByIdAndYearAndMonth(@ApiParam(value = "the unique identifier of the spatial level",required=true) @PathVariable("spatialUnitId") String spatialUnitId,@ApiParam(value = "year for which datasets shall be queried",required=true) @PathVariable("year") BigDecimal year,@ApiParam(value = "month for which datasets shall be queried",required=true) @PathVariable("month") BigDecimal month,@ApiParam(value = "day for which datasets shall be queried",required=true) @PathVariable("day") BigDecimal day,@ApiParam(value = "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification.", allowableValues = "original, weak, medium, strong", defaultValue = "original")  @RequestParam(value = "simplifyGeometries", required = false, defaultValue="original") String simplifyGeometries, Principal principal);


    @ApiOperation(value = "retrieve the JSON schema for the selected spatial unit/level", nickname = "getSpatialUnitsSchemaById", notes = "retrieve the JSON schema for the selected spatial unit/level. The JSON schema indicates the property structure of the dataset.", response = String.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 400, message = "Invalid status value"),
        @ApiResponse(code = 401, message = "API key is missing or invalid") })
    @RequestMapping(value = "/spatial-units/{spatialUnitId}/schema",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> getSpatialUnitsSchemaById(@ApiParam(value = "the unique identifier of the spatial level",required=true) @PathVariable("spatialUnitId") String spatialUnitId, Principal principal);

	@ApiOperation(value = "retrieve single feature database records for all applicable periods of validity for the selected spatial-unit dataset (hence might contain the target feature multiple times if it exists for different periods of validity)", nickname = "getSingleSpatialUnitFeatureById", notes = "retrieve single feature database records for all applicable periods of validity for the selected spatial-unit dataset (hence might contain the target feature multiple times if it exists for different periods of validity)", response = String.class, authorizations = {
			@Authorization(value = "kommonitor-data-access_oauth", scopes = {

			}) }, tags = { "spatial-units-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = String.class),
			@ApiResponse(code = 400, message = "Invalid status value"),
			@ApiResponse(code = 401, message = "API key is missing or invalid"),
			@ApiResponse(code = 403, message = "Forbidden"), @ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/spatial-units/{spatialUnitId}/singleFeature/{featureId}", produces = {
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<byte[]> getSingleSpatialUnitFeatureById(
			@ApiParam(value = "the identifier of the spatial-unit dataset", required = true) @PathVariable("spatialUnitId") String spatialUnitId,
			@ApiParam(value = "the identifier of the spatial-unit dataset feature", required = true) @PathVariable("featureId") String featureId,
			@ApiParam(value = "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification.", allowableValues = "original, weak, medium, strong", defaultValue = "original") @RequestParam(value = "simplifyGeometries", required = false, defaultValue = "original") String simplifyGeometries,
			Principal principal);

	@ApiOperation(value = "retrieve single feature database record specified by its unique database primary key id", nickname = "getSingleSpatialUnitFeatureRecordById", notes = "retrieve single feature database record specified by its unique database primary key id", response = String.class, authorizations = {
			@Authorization(value = "kommonitor-data-access_oauth", scopes = {

			}) }, tags = { "spatial-units-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = String.class),
			@ApiResponse(code = 400, message = "Invalid status value"),
			@ApiResponse(code = 401, message = "API key is missing or invalid"),
			@ApiResponse(code = 403, message = "Forbidden"), @ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/spatial-units/{spatialUnitId}/singleFeature/{featureId}/singleFeatureRecord/{featureRecordId}", produces = {
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<byte[]> getSingleSpatialUnitFeatureRecordById(
			@ApiParam(value = "the identifier of the spatial-unit dataset", required = true) @PathVariable("spatialUnitId") String spatialUnitId,
			@ApiParam(value = "the identifier of the spatial-unit dataset feature", required = true) @PathVariable("featureId") String featureId,
			@ApiParam(value = "the unique database record identifier of the spatial-unit dataset feature - multiple records may exist for the same real world object if they apply to different periods of validity", required = true) @PathVariable("featureRecordId") String featureRecordId,
			@ApiParam(value = "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification.", allowableValues = "original, weak, medium, strong", defaultValue = "original") @RequestParam(value = "simplifyGeometries", required = false, defaultValue = "original") String simplifyGeometries,
			Principal principal);

    @ApiOperation(value = "Modify/Update the features of the selected spatial-unit", nickname = "updateSpatialUnitAsBody", notes = "Modify/Update the features of the selected spatial-unit. The interface expects a full upload of all geometries for the spatial unit. Internally, those geometries are compared to the existing ones to mark 'old' geometries that are no longer in use as outdated. Hence, each geometric object is only persisted once and its use is controlled by time validity marks.", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "API key is missing or invalid"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/spatial-units/{spatialUnitId}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity updateSpatialUnitAsBody(@ApiParam(value = "the unique identifier of the spatial level",required=true) @PathVariable("spatialUnitId") String spatialUnitId,@ApiParam(value = "feature data" ,required=true )   @RequestBody SpatialUnitPUTInputType featureData);


    @ApiOperation(value = "Modify/Update the metadata of the selected spatial-unit", nickname = "updateSpatialUnitMetadataAsBody", notes = "Modify/Update the metadata of the selected spatial-unit. This replaces the formerly stored metadata.", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "API key is missing or invalid"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/spatial-units/{spatialUnitId}",
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity updateSpatialUnitMetadataAsBody(@ApiParam(value = "the unique identifier of the spatial level",required=true) @PathVariable("spatialUnitId") String spatialUnitId,@ApiParam(value = "metadata input" ,required=true )   @RequestBody SpatialUnitPATCHInputType metadata);

	@ApiOperation(value = "Modify/Update the feature record of the selected spatial-unit dataset feature", nickname = "updateSpatialUnitFeatureRecordAsBody", notes = "Modify/Update the feature record of the selected spatial-unit dataset feature", response = ResponseEntity.class, authorizations = {
			@Authorization(value = "kommonitor-data-access_oauth", scopes = {

			}) }, tags = { "spatial-units-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK - Updated", response = ResponseEntity.class),
			@ApiResponse(code = 401, message = "API key is missing or invalid"),
			@ApiResponse(code = 403, message = "Forbidden"), @ApiResponse(code = 404, message = "Not Found"),
			@ApiResponse(code = 405, message = "Invalid input") })
	@RequestMapping(value = "/spatial-units/{spatialUnitId}/singleFeature/{featureId}/singleFeatureRecord/{featureRecordId}", produces = {
			"*/*" }, consumes = { "application/json" }, method = RequestMethod.PUT)
	ResponseEntity<ResponseEntity> updateSpatialUnitFeatureRecordAsBody(
			@ApiParam(value = "spatial-unit feature record data", required = true) @RequestBody String spatialUnitFeatureRecordData,
			@ApiParam(value = "the identifier of the spatial-unit dataset", required = true) @PathVariable("spatialUnitId") String spatialUnitId,
			@ApiParam(value = "the identifier of the spatial-unit dataset feature", required = true) @PathVariable("featureId") String featureId,
			@ApiParam(value = "the unique database record identifier of the spatial-unit dataset feature - multiple records may exist for the same real world object if they apply to different periods of validity", required = true) @PathVariable("featureRecordId") String featureRecordId);
    
}
