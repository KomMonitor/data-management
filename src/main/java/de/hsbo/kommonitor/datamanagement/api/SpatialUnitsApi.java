/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.hsbo.kommonitor.datamanagement.api;

import java.math.BigDecimal;
import de.hsbo.kommonitor.datamanagement.model.PermissionLevelType;
import de.hsbo.kommonitor.datamanagement.model.SpatialUnitOverviewType;
import de.hsbo.kommonitor.datamanagement.model.SpatialUnitPATCHInputType;
import de.hsbo.kommonitor.datamanagement.model.SpatialUnitPOSTInputType;
import de.hsbo.kommonitor.datamanagement.model.SpatialUnitPUTInputType;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-12-14T08:36:20.041405+01:00[Europe/Berlin]")
@Validated
@Tag(name = "spatial-units", description = "the SpatialUnits API")
public interface SpatialUnitsApi {

    /**
     * POST /spatial-units : Add a new spatial-unit
     * Add/Register a spatial unit for a certain period of time
     *
     * @param featureData feature data (required)
     * @return OK (status code 200)
     *         or Created (status code 201)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "addSpatialUnitAsBody",
        summary = "Add a new spatial-unit",
        description = "Add/Register a spatial unit for a certain period of time",
        tags = { "spatial-units" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SpatialUnitOverviewType.class))
            }),
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SpatialUnitOverviewType.class))
            }),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found"),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/spatial-units",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<SpatialUnitOverviewType> addSpatialUnitAsBody(
        @Parameter(name = "featureData", description = "feature data", required = true) @Valid @RequestBody SpatialUnitPOSTInputType featureData
    );


    /**
     * DELETE /spatial-units/{spatialUnitId}/allFeatures : Delete all features/contents of the selected spatial-unit dataset
     * Delete all features/contents of the selected spatial-unit dataset
     *
     * @param spatialUnitId the unique identifier of the spatial level (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "deleteAllSpatialUnitFeaturesById",
        summary = "Delete all features/contents of the selected spatial-unit dataset",
        description = "Delete all features/contents of the selected spatial-unit dataset",
        tags = { "spatial-units" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/spatial-units/{spatialUnitId}/allFeatures"
    )
    
    ResponseEntity<Void> deleteAllSpatialUnitFeaturesById(
        @Parameter(name = "spatialUnitId", description = "the unique identifier of the spatial level", required = true, in = ParameterIn.PATH) @PathVariable("spatialUnitId") String spatialUnitId
    );


    /**
     * DELETE /spatial-units/{spatialUnitId}/singleFeature/{featureId} : Delete all database records for the specified feature of the selected spatial-unit dataset
     * Delete all database records for the specified feature of the selected spatial-unit dataset
     *
     * @param spatialUnitId the identifier of the spatial-unit dataset (required)
     * @param featureId the identifier of the spatial-unit dataset feature (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "deleteSingleSpatialUnitFeatureById",
        summary = "Delete all database records for the specified feature of the selected spatial-unit dataset",
        description = "Delete all database records for the specified feature of the selected spatial-unit dataset",
        tags = { "spatial-units" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/spatial-units/{spatialUnitId}/singleFeature/{featureId}"
    )
    
    ResponseEntity<Void> deleteSingleSpatialUnitFeatureById(
        @Parameter(name = "spatialUnitId", description = "the identifier of the spatial-unit dataset", required = true, in = ParameterIn.PATH) @PathVariable("spatialUnitId") String spatialUnitId,
        @Parameter(name = "featureId", description = "the identifier of the spatial-unit dataset feature", required = true, in = ParameterIn.PATH) @PathVariable("featureId") String featureId
    );


    /**
     * DELETE /spatial-units/{spatialUnitId}/singleFeature/{featureId}/singleFeatureRecord/{featureRecordId} : Delete single feature database record specified by its unique database primary key id for the specified feature of the selected spatial-unit dataset
     * Delete single feature database record specified by its unique database primary key id for the specified feature of the selected spatial-unit dataset
     *
     * @param spatialUnitId the identifier of the spatial-unit dataset (required)
     * @param featureId the identifier of the spatial-unit dataset feature (required)
     * @param featureRecordId the unique database record identifier of the spatial-unit dataset feature - multiple records may exist for the same real world object if they apply to different periods of validity (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "deleteSingleSpatialUnitFeatureRecordById",
        summary = "Delete single feature database record specified by its unique database primary key id for the specified feature of the selected spatial-unit dataset",
        description = "Delete single feature database record specified by its unique database primary key id for the specified feature of the selected spatial-unit dataset",
        tags = { "spatial-units" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/spatial-units/{spatialUnitId}/singleFeature/{featureId}/singleFeatureRecord/{featureRecordId}"
    )
    
    ResponseEntity<Void> deleteSingleSpatialUnitFeatureRecordById(
        @Parameter(name = "spatialUnitId", description = "the identifier of the spatial-unit dataset", required = true, in = ParameterIn.PATH) @PathVariable("spatialUnitId") String spatialUnitId,
        @Parameter(name = "featureId", description = "the identifier of the spatial-unit dataset feature", required = true, in = ParameterIn.PATH) @PathVariable("featureId") String featureId,
        @Parameter(name = "featureRecordId", description = "the unique database record identifier of the spatial-unit dataset feature - multiple records may exist for the same real world object if they apply to different periods of validity", required = true, in = ParameterIn.PATH) @PathVariable("featureRecordId") String featureRecordId
    );


    /**
     * DELETE /spatial-units/{spatialUnitId} : Delete the features/contents of the selected spatial-unit
     * Delete the features/contents of the selected spatial-unit
     *
     * @param spatialUnitId the unique identifier of the spatial level (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "deleteSpatialUnitById",
        summary = "Delete the features/contents of the selected spatial-unit",
        description = "Delete the features/contents of the selected spatial-unit",
        tags = { "spatial-units" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/spatial-units/{spatialUnitId}"
    )
    
    ResponseEntity<Void> deleteSpatialUnitById(
        @Parameter(name = "spatialUnitId", description = "the unique identifier of the spatial level", required = true, in = ParameterIn.PATH) @PathVariable("spatialUnitId") String spatialUnitId
    );


    /**
     * DELETE /spatial-units/{spatialUnitId}/{year}/{month}/{day} : Delete the features/contents of the selected spatial-unit, year and month
     * Delete the features/contents of the selected spatial-unit, year and month
     *
     * @param spatialUnitId the unique identifier of the spatial level (required)
     * @param year year for which datasets shall be queried (required)
     * @param month month for which datasets shall be queried (required)
     * @param day day for which datasets shall be queried (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "deleteSpatialUnitByIdAndYearAndMonth",
        summary = "Delete the features/contents of the selected spatial-unit, year and month",
        description = "Delete the features/contents of the selected spatial-unit, year and month",
        tags = { "spatial-units" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/spatial-units/{spatialUnitId}/{year}/{month}/{day}"
    )
    
    ResponseEntity<Void> deleteSpatialUnitByIdAndYearAndMonth(
        @Parameter(name = "spatialUnitId", description = "the unique identifier of the spatial level", required = true, in = ParameterIn.PATH) @PathVariable("spatialUnitId") String spatialUnitId,
        @Parameter(name = "year", description = "year for which datasets shall be queried", required = true, in = ParameterIn.PATH) @PathVariable("year") BigDecimal year,
        @Parameter(name = "month", description = "month for which datasets shall be queried", required = true, in = ParameterIn.PATH) @PathVariable("month") BigDecimal month,
        @Parameter(name = "day", description = "day for which datasets shall be queried", required = true, in = ParameterIn.PATH) @PathVariable("day") BigDecimal day
    );


    /**
     * GET /spatial-units/{spatialUnitId}/allFeatures : retrieve all feature entries for all applicable periods of validity for the selected spatial unit/level (hence might contain each feature multiple times if they exist for different periods of validity)
     * retrieve all feature entries for all applicable periods of validity for the selected spatial unit/level (hence might contain each feature multiple times if they exist for different periods of validity)
     *
     * @param spatialUnitId the unique identifier of the spatial level (required)
     * @param simplifyGeometries ontrols simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from &#39;weak&#39; to &#39;strong&#39;, while &#39;original&#39; will return original feature geometries without any simplification. (optional, default to original)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getAllSpatialUnitFeaturesById",
        summary = "retrieve all feature entries for all applicable periods of validity for the selected spatial unit/level (hence might contain each feature multiple times if they exist for different periods of validity)",
        description = "retrieve all feature entries for all applicable periods of validity for the selected spatial unit/level (hence might contain each feature multiple times if they exist for different periods of validity)",
        tags = { "spatial-units" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = byte[].class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/spatial-units/{spatialUnitId}/allFeatures",
        produces = { "application/json" }
    )
    
    ResponseEntity<byte[]> getAllSpatialUnitFeaturesById(
        @Parameter(name = "spatialUnitId", description = "the unique identifier of the spatial level", required = true, in = ParameterIn.PATH) @PathVariable("spatialUnitId") String spatialUnitId,
        @Parameter(name = "simplifyGeometries", description = "ontrols simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "simplifyGeometries", required = false, defaultValue = "original") String simplifyGeometries
    );


    /**
     * GET /spatial-units/{spatialUnitId}/singleFeature/{featureId} : retrieve single feature database records for all applicable periods of validity for the selected spatial-unit dataset (hence might contain the target feature multiple times if it exists for different periods of validity)
     * retrieve single feature database records for all applicable periods of validity for the selected spatial-unit dataset (hence might contain the target feature multiple times if it exists for different periods of validity)
     *
     * @param spatialUnitId the identifier of the spatial-unit dataset (required)
     * @param featureId the identifier of the spatial-unit dataset feature (required)
     * @param simplifyGeometries Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from &#39;weak&#39; to &#39;strong&#39;, while &#39;original&#39; will return original feature geometries without any simplification. (optional, default to original)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getSingleSpatialUnitFeatureById",
        summary = "retrieve single feature database records for all applicable periods of validity for the selected spatial-unit dataset (hence might contain the target feature multiple times if it exists for different periods of validity)",
        description = "retrieve single feature database records for all applicable periods of validity for the selected spatial-unit dataset (hence might contain the target feature multiple times if it exists for different periods of validity)",
        tags = { "spatial-units" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = byte[].class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/spatial-units/{spatialUnitId}/singleFeature/{featureId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<byte[]> getSingleSpatialUnitFeatureById(
        @Parameter(name = "spatialUnitId", description = "the identifier of the spatial-unit dataset", required = true, in = ParameterIn.PATH) @PathVariable("spatialUnitId") String spatialUnitId,
        @Parameter(name = "featureId", description = "the identifier of the spatial-unit dataset feature", required = true, in = ParameterIn.PATH) @PathVariable("featureId") String featureId,
        @Parameter(name = "simplifyGeometries", description = "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "simplifyGeometries", required = false, defaultValue = "original") String simplifyGeometries
    );


    /**
     * GET /spatial-units/{spatialUnitId}/singleFeature/{featureId}/singleFeatureRecord/{featureRecordId} : retrieve single feature database record specified by its unique database primary key id
     * retrieve single feature database record specified by its unique database primary key id
     *
     * @param spatialUnitId the identifier of the spatial-unit dataset (required)
     * @param featureId the identifier of the spatial-unit dataset feature (required)
     * @param featureRecordId the unique database record identifier of the spatial-unit dataset feature - multiple records may exist for the same real world object if they apply to different periods of validity (required)
     * @param simplifyGeometries Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from &#39;weak&#39; to &#39;strong&#39;, while &#39;original&#39; will return original feature geometries without any simplification. (optional, default to original)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getSingleSpatialUnitFeatureRecordById",
        summary = "retrieve single feature database record specified by its unique database primary key id",
        description = "retrieve single feature database record specified by its unique database primary key id",
        tags = { "spatial-units" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = byte[].class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/spatial-units/{spatialUnitId}/singleFeature/{featureId}/singleFeatureRecord/{featureRecordId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<byte[]> getSingleSpatialUnitFeatureRecordById(
        @Parameter(name = "spatialUnitId", description = "the identifier of the spatial-unit dataset", required = true, in = ParameterIn.PATH) @PathVariable("spatialUnitId") String spatialUnitId,
        @Parameter(name = "featureId", description = "the identifier of the spatial-unit dataset feature", required = true, in = ParameterIn.PATH) @PathVariable("featureId") String featureId,
        @Parameter(name = "featureRecordId", description = "the unique database record identifier of the spatial-unit dataset feature - multiple records may exist for the same real world object if they apply to different periods of validity", required = true, in = ParameterIn.PATH) @PathVariable("featureRecordId") String featureRecordId,
        @Parameter(name = "simplifyGeometries", description = "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "simplifyGeometries", required = false, defaultValue = "original") String simplifyGeometries
    );


    /**
     * GET /spatial-units : retrieve information about available features of different spatial units/levels
     * retrieve information about available features of different spatial units/levels
     *
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getSpatialUnits",
        summary = "retrieve information about available features of different spatial units/levels",
        description = "retrieve information about available features of different spatial units/levels",
        tags = { "spatial-units" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = SpatialUnitOverviewType.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/spatial-units",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<SpatialUnitOverviewType>> getSpatialUnits(
        
    );


    /**
     * GET /spatial-units/{spatialUnitId} : retrieve information about available features of the selected spatial unit/level
     * retrieve information about available features of the selected spatial unit/level
     *
     * @param spatialUnitId the unique identifier of the spatial level (required)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getSpatialUnitsById",
        summary = "retrieve information about available features of the selected spatial unit/level",
        description = "retrieve information about available features of the selected spatial unit/level",
        tags = { "spatial-units" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SpatialUnitOverviewType.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/spatial-units/{spatialUnitId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<SpatialUnitOverviewType> getSpatialUnitsById(
        @Parameter(name = "spatialUnitId", description = "the unique identifier of the spatial level", required = true, in = ParameterIn.PATH) @PathVariable("spatialUnitId") String spatialUnitId
    );


    /**
     * GET /spatial-units/{spatialUnitId}/{year}/{month}/{day} : retrieve the features according to the selected spatial unit/level and selected year and month as GeoJSON
     * retrieve the features according to the selected spatial unit/level and selected year and month as GeoJSON
     *
     * @param spatialUnitId the unique identifier of the spatial level (required)
     * @param year year for which datasets shall be queried (required)
     * @param month month for which datasets shall be queried (required)
     * @param day day for which datasets shall be queried (required)
     * @param simplifyGeometries Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from &#39;weak&#39; to &#39;strong&#39;, while &#39;original&#39; will return original feature geometries without any simplification. (optional, default to original)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getSpatialUnitsByIdAndYearAndMonth",
        summary = "retrieve the features according to the selected spatial unit/level and selected year and month as GeoJSON",
        description = "retrieve the features according to the selected spatial unit/level and selected year and month as GeoJSON",
        tags = { "spatial-units" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/octed-stream", schema = @Schema(implementation = byte[].class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/spatial-units/{spatialUnitId}/{year}/{month}/{day}",
        produces = { "application/octed-stream" }
    )
    
    ResponseEntity<byte[]> getSpatialUnitsByIdAndYearAndMonth(
        @Parameter(name = "spatialUnitId", description = "the unique identifier of the spatial level", required = true, in = ParameterIn.PATH) @PathVariable("spatialUnitId") String spatialUnitId,
        @Parameter(name = "year", description = "year for which datasets shall be queried", required = true, in = ParameterIn.PATH) @PathVariable("year") BigDecimal year,
        @Parameter(name = "month", description = "month for which datasets shall be queried", required = true, in = ParameterIn.PATH) @PathVariable("month") BigDecimal month,
        @Parameter(name = "day", description = "day for which datasets shall be queried", required = true, in = ParameterIn.PATH) @PathVariable("day") BigDecimal day,
        @Parameter(name = "simplifyGeometries", description = "Controls simplification of feature geometries. Each option will preserve topology to neighbour features. Simplification increases from 'weak' to 'strong', while 'original' will return original feature geometries without any simplification.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "simplifyGeometries", required = false, defaultValue = "original") String simplifyGeometries
    );


    /**
     * GET /spatial-units/{spatialUnitId}/permissions : retrieve information about the permissions for the selected spatial unit dataset
     * retrieve information about the permissions for the selected spatial unit dataset
     *
     * @param spatialUnitId identifier of the spatial unit dataset (required)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getSpatialUnitsPermissionsById",
        summary = "retrieve information about the permissions for the selected spatial unit dataset",
        description = "retrieve information about the permissions for the selected spatial unit dataset",
        tags = { "spatial-units" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PermissionLevelType.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/spatial-units/{spatialUnitId}/permissions",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<PermissionLevelType>> getSpatialUnitsPermissionsById(
        @Parameter(name = "spatialUnitId", description = "identifier of the spatial unit dataset", required = true, in = ParameterIn.PATH) @PathVariable("spatialUnitId") String spatialUnitId
    );


    /**
     * GET /spatial-units/{spatialUnitId}/schema : retrieve the JSON schema for the selected spatial unit/level
     * retrieve the JSON schema for the selected spatial unit/level. The JSON schema indicates the property structure of the dataset.
     *
     * @param spatialUnitId the unique identifier of the spatial level (required)
     * @return OK (status code 200)
     *         or Invalid status value (status code 400)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getSpatialUnitsSchemaById",
        summary = "retrieve the JSON schema for the selected spatial unit/level",
        description = "retrieve the JSON schema for the selected spatial unit/level. The JSON schema indicates the property structure of the dataset.",
        tags = { "spatial-units" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/spatial-units/{spatialUnitId}/schema",
        produces = { "application/json" }
    )
    
    ResponseEntity<String> getSpatialUnitsSchemaById(
        @Parameter(name = "spatialUnitId", description = "the unique identifier of the spatial level", required = true, in = ParameterIn.PATH) @PathVariable("spatialUnitId") String spatialUnitId
    );


    /**
     * PUT /spatial-units/{spatialUnitId} : Modify/Update the features of the selected spatial-unit
     * Modify/Update the features of the selected spatial-unit. The interface expects a full upload of all geometries for the spatial unit. Internally, those geometries are compared to the existing ones to mark &#39;old&#39; geometries that are no longer in use as outdated. Hence, each geometric object is only persisted once and its use is controlled by time validity marks.
     *
     * @param spatialUnitId the unique identifier of the spatial level (required)
     * @param featureData feature data (required)
     * @return OK (status code 200)
     *         or Created (status code 201)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "updateSpatialUnitAsBody",
        summary = "Modify/Update the features of the selected spatial-unit",
        description = "Modify/Update the features of the selected spatial-unit. The interface expects a full upload of all geometries for the spatial unit. Internally, those geometries are compared to the existing ones to mark 'old' geometries that are no longer in use as outdated. Hence, each geometric object is only persisted once and its use is controlled by time validity marks.",
        tags = { "spatial-units" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "201", description = "Created"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found"),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/spatial-units/{spatialUnitId}",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> updateSpatialUnitAsBody(
        @Parameter(name = "spatialUnitId", description = "the unique identifier of the spatial level", required = true, in = ParameterIn.PATH) @PathVariable("spatialUnitId") String spatialUnitId,
        @Parameter(name = "featureData", description = "feature data", required = true) @Valid @RequestBody SpatialUnitPUTInputType featureData
    );


    /**
     * PUT /spatial-units/{spatialUnitId}/singleFeature/{featureId}/singleFeatureRecord/{featureRecordId} : Modify/Update the feature record of the selected spatial-unit dataset feature
     * Modify/Update the feature record of the selected spatial-unit dataset feature
     *
     * @param spatialUnitId the identifier of the spatial-unit dataset (required)
     * @param featureId the identifier of the spatial-unit dataset feature (required)
     * @param featureRecordId the unique database record identifier of the spatial-unit dataset feature - multiple records may exist for the same real world object if they apply to different periods of validity (required)
     * @param spatialUnitFeatureRecordData spatial-unit feature record data (required)
     * @return OK - Updated (status code 200)
     *         or Created (status code 201)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "updateSpatialUnitFeatureRecordAsBody",
        summary = "Modify/Update the feature record of the selected spatial-unit dataset feature",
        description = "Modify/Update the feature record of the selected spatial-unit dataset feature",
        tags = { "spatial-units" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK - Updated"),
            @ApiResponse(responseCode = "201", description = "Created"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found"),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/spatial-units/{spatialUnitId}/singleFeature/{featureId}/singleFeatureRecord/{featureRecordId}",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> updateSpatialUnitFeatureRecordAsBody(
        @Parameter(name = "spatialUnitId", description = "the identifier of the spatial-unit dataset", required = true, in = ParameterIn.PATH) @PathVariable("spatialUnitId") String spatialUnitId,
        @Parameter(name = "featureId", description = "the identifier of the spatial-unit dataset feature", required = true, in = ParameterIn.PATH) @PathVariable("featureId") String featureId,
        @Parameter(name = "featureRecordId", description = "the unique database record identifier of the spatial-unit dataset feature - multiple records may exist for the same real world object if they apply to different periods of validity", required = true, in = ParameterIn.PATH) @PathVariable("featureRecordId") String featureRecordId,
        @Parameter(name = "spatialUnitFeatureRecordData", description = "spatial-unit feature record data", required = true) @Valid @RequestBody String spatialUnitFeatureRecordData
    );


    /**
     * PATCH /spatial-units/{spatialUnitId} : Modify/Update the metadata of the selected spatial-unit
     * Modify/Update the metadata of the selected spatial-unit. This replaces the formerly stored metadata.
     *
     * @param spatialUnitId the unique identifier of the spatial level (required)
     * @param metadata metadata input (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or API key is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "updateSpatialUnitMetadataAsBody",
        summary = "Modify/Update the metadata of the selected spatial-unit",
        description = "Modify/Update the metadata of the selected spatial-unit. This replaces the formerly stored metadata.",
        tags = { "spatial-units" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "API key is missing or invalid"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        },
        security = {
            @SecurityRequirement(name = "kommonitor-data-access_oauth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/spatial-units/{spatialUnitId}",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> updateSpatialUnitMetadataAsBody(
        @Parameter(name = "spatialUnitId", description = "the unique identifier of the spatial level", required = true, in = ParameterIn.PATH) @PathVariable("spatialUnitId") String spatialUnitId,
        @Parameter(name = "metadata", description = "metadata input", required = true) @Valid @RequestBody SpatialUnitPATCHInputType metadata
    );

}
