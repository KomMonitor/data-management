package de.hsbo.kommonitor.datamanagement.api.impl.roles;

import java.util.List;

import javax.transaction.Transactional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Repository;

import de.hsbo.kommonitor.datamanagement.api.impl.exception.ResourceNotFoundException;
import de.hsbo.kommonitor.datamanagement.model.roles.RoleInputType;
import de.hsbo.kommonitor.datamanagement.model.roles.RoleOverviewType;
import de.hsbo.kommonitor.datamanagement.model.roles.RolesEntity;

@Transactional
@Repository
@Component
public class RolesManager {

	private static Logger logger = LoggerFactory.getLogger(RolesManager.class);

	/**
	*
	*/
	// @PersistenceContext
	// EntityManager em;

	@Autowired
	RolesRepository rolesRepo;

	public String addRole(RoleInputType roleData) throws Exception {
		String roleName = roleData.getRoleName();
		logger.info("Trying to persist role with roleName '{}'", roleName);
		/*
		 * analyse input type
		 * 
		 * make instance of TopicOverviewType
		 * 
		 * save TopicOverviewType instance to db
		 * 
		 * return id
		 */

		if (rolesRepo.existsByRoleName(roleName)) {
			logger.error("The role with roleName '{}' already exists. Thus aborting add topic request.", roleName);
			throw new Exception("role already exists. Aborting add role request.");
		}

		RolesEntity role = new RolesEntity();
		role.setRoleName(roleName);

		/*
		 * ID will be autogenerated from JPA / Hibernate
		 */

		rolesRepo.save(role);

		return role.getRoleId();

	}

	public boolean deleteRoleById(String roleId) throws ResourceNotFoundException {
		logger.info("Trying to delete role with roleId '{}'", roleId);
		if (rolesRepo.existsByRoleId(roleId)) {
			rolesRepo.deleteByRoleId(roleId);
			return true;
		} else {
			logger.error("No role with id '{}' was found in database. Delete request has no effect.", roleId);
			throw new ResourceNotFoundException(HttpStatus.NOT_FOUND.value(),
					"Tried to delete role, but no role existes with id " + roleId);
		}
	}

	public RoleOverviewType getRoleById(String roleId) {
		logger.info("Retrieving role for roleId '{}'", roleId);

		RolesEntity roleEntity = rolesRepo.findByRoleId(roleId);
		RoleOverviewType role = RolesMapper.mapToSwaggerRole(roleEntity);

		return role;
	}

	public List<RoleOverviewType> getRoles() {
		logger.info("Retrieving all roles from db");

		List<RolesEntity> roleEntities = rolesRepo.findAll();
		List<RoleOverviewType> roles = RolesMapper.mapToSwaggerRoles(roleEntities);

		return roles;
	}

	public String updateRole(RoleInputType roleData, String roleId) throws ResourceNotFoundException {
		logger.info("Trying to update role with roleId '{}'", roleId);
		if (rolesRepo.existsByRoleId(roleId)) {
			RolesEntity roleEntity = rolesRepo.findByRoleId(roleId);
			roleEntity.setRoleName(roleData.getRoleName());
			rolesRepo.save(roleEntity);
			return roleId;
		} else {
			logger.error("No role with id '{}' was found in database. Update request has no effect.", roleId);
			throw new ResourceNotFoundException(HttpStatus.NOT_FOUND.value(),
			"Tried to update role, but no role existes with id " + roleId);
		}
	}

}
