package de.hsbo.kommonitor.datamanagement.api.impl.roles;

import java.util.List;

import javax.transaction.Transactional;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import de.hsbo.kommonitor.datamanagement.model.roles.PermissionLevelType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Repository;

import de.hsbo.kommonitor.datamanagement.api.impl.exception.ResourceNotFoundException;
import de.hsbo.kommonitor.datamanagement.model.roles.RoleInputType;
import de.hsbo.kommonitor.datamanagement.model.roles.RoleOverviewType;
import de.hsbo.kommonitor.datamanagement.model.roles.RolesEntity;

@Transactional
@Repository
@Component
public class RolesManager {

    private static final Logger logger = LoggerFactory.getLogger(RolesManager.class);

    @Autowired
    RolesRepository rolesRepo;

    public RoleOverviewType addRole(RoleInputType roleData) throws Exception {
        String organizationalUnit = roleData.getOrganizationalUnit();
        PermissionLevelType permissionLevel = roleData.getPermissionLevel();
        logger.info("Trying to persist role with roleName '{}' and permissionLevel '{}'",
                    organizationalUnit,
                    permissionLevel);

        if (rolesRepo.existsByOrganizationalUnitAndPermissionLevel(organizationalUnit, permissionLevel)) {
            logger.error("The role with organizationalUnit '{}' and permissionLevel '{}'already exists. " +
                             "Thus aborting add role request.",
                         organizationalUnit,
                         permissionLevel);
            throw new Exception("role already exists. Aborting add role request.");
        }

        /*
         * ID will be autogenerated by JPA / Hibernate
         */
        RolesEntity role = new RolesEntity();
        role.setOrganizationalUnit(organizationalUnit);
        role.setPermissionLevel(roleData.getPermissionLevel());
        rolesRepo.saveAndFlush(role);

        return getRoleById(role.getRoleId());

    }

    public boolean deleteRoleById(String roleId) throws ResourceNotFoundException {
        logger.info("Trying to delete role with roleId '{}'", roleId);
        if (rolesRepo.existsByRoleId(roleId)) {
            rolesRepo.deleteByRoleId(roleId);
            return true;
        } else {
            logger.error("No role with id '{}' was found in database. Delete request has no effect.", roleId);
            throw new ResourceNotFoundException(HttpStatus.NOT_FOUND.value(),
                                                "Tried to delete role, but no role existes with id " + roleId);
        }
    }

    public RoleOverviewType getRoleById(String roleId) {
        logger.info("Retrieving role for roleId '{}'", roleId);

        RolesEntity roleEntity = rolesRepo.findByRoleId(roleId);
        RoleOverviewType role = RolesMapper.mapToSwaggerRole(roleEntity);

        return role;
    }

    public List<RoleOverviewType> getRoles() {
        logger.info("Retrieving all roles from db");

        List<RolesEntity> roleEntities = rolesRepo.findAll();
        List<RoleOverviewType> roles = RolesMapper.mapToSwaggerRoles(roleEntities);

        return roles;
    }

    public String updateRole(RoleInputType roleData, String roleId) throws ResourceNotFoundException {
        logger.info("Trying to update role with roleId '{}'", roleId);
        if (rolesRepo.existsByRoleId(roleId)) {
            RolesEntity roleEntity = rolesRepo.findByRoleId(roleId);
            roleEntity.setOrganizationalUnit(roleData.getOrganizationalUnit());
            roleEntity.setPermissionLevel(roleData.getPermissionLevel());
            rolesRepo.saveAndFlush(roleEntity);
            return roleId;
        } else {
            logger.error("No role with id '{}' was found in database. Update request has no effect.", roleId);
            throw new ResourceNotFoundException(HttpStatus.NOT_FOUND.value(),
                                                "Tried to update role, but no role existes with id " + roleId);
        }
    }

}
